[
    {
        "Parameter_Name": "calculation",
        "Value_Type": "character",
        "Default_Values": {
            "default": "scf"
        },
        "Description": "calculation\nA string describing the task to be performed",
        "Possible_Usage_Conditions": [
            "calculation = 'scf'",
            "calculation = 'nscf'",
            "calculation = 'bands'",
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "Fixed cell calculations",
            "Variable cell calculations"
        ],
        "Required/Optional": "required",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "scf": "standard calculation",
            "nscf": null,
            "bands": null,
            "relax": "only the atomic positions are allowed to vary",
            "md": "ab-initio molecular dynamics (MD) simulations",
            "vc-relax": "allows to vary both the atomic positions and lattice constants",
            "vc-md": "molecular dynamics (MD) simulations, vary both the atomic positions and lattice constants (vc = variable-cell)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "title",
        "Value_Type": "character",
        "Default_Values": {
            "default": " "
        },
        "Description": "title\nReprinted on output.",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "verbosity",
        "Value_Type": "character",
        "Default_Values": {
            "default": "low"
        },
        "Description": "verbosity\nCurrently two verbosity levels are implemented",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "high": null,
            "low": null,
            "debug": "same effect as high",
            "medium": "same effect as high",
            "default": "same effect as low",
            "minimal": "same effect as low"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "restart_mode",
        "Value_Type": "character",
        "Default_Values": {
            "default": "from_scratch"
        },
        "Description": "restart_mode\nControls how the calculation should be started/restarted",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": "For 'restart', can only be used to continue an interrupted calculation with same number of processors and parallelization. Cannot be used for new calculations or non-scf calculations.",
        "Parameter_Value_Conditions": {
            "from_scratch": "Normal way to perform PWscf calculation",
            "restart": "Only for continuing interrupted runs if calculation was cleanly stopped using max_seconds parameter or by user request with exit file"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "startingwfc": "Set to 'file' when restart_mode='restart'",
            "startingpot": "Set to 'file' when restart_mode='restart'",
            "prefix": "Used to identify exit file name for restart",
            "outdir": "Directory where exit file is located for restart",
            "max_seconds": "Can trigger clean stop for restart"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "nstep",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null,
            "scf": 1,
            "nscf": 1,
            "bands": 1,
            "relax": 50,
            "md": 50,
            "vc-relax": 50,
            "vc-md": 50
        },
        "Description": "nstep\nnumber of molecular-dynamics or structural optimization steps performed",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": "If set to 0, the code performs a quick \"dry run\", stopping just after initialization. This is useful to check for input correctness and to have the summary printed.",
        "Parameter_Value_Conditions": {
            "0": "performs quick dry run with initialization only"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "determines default value based on calculation type"
        },
        "Final_comments": "in MD calculations, the code will perform \"nstep\" steps even if restarting from a previously interrupted calculation.",
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "iprint",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "iprint\nWhen calculation = 'md' (molecular dynamics) trajectory is written every iprint md steps.",
        "Possible_Usage_Conditions": [
            "calculation = 'md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in molecular dynamics calculations",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "Must be set to 'md' for this parameter to be relevant"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "tstress",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "tstress\ncalculate stress",
        "Possible_Usage_Conditions": [
            "stress calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "It is set to .TRUE. automatically if calculation = 'vc-md' or 'vc-relax'",
        "Parameter_Value_Conditions": {
            ".TRUE.": "when calculation = 'vc-md' or 'vc-relax'"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "automatically set to .TRUE. when calculation is 'vc-md' or 'vc-relax'"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "tprnfor",
        "Value_Type": "logical",
        "Default_Values": {
            "default": null
        },
        "Description": "tprnfor\ncalculate forces",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-md'",
            "calculation = 'nscf'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "It is set to .TRUE. automatically if calculation = 'relax','md','vc-md'",
        "Parameter_Value_Conditions": {
            ".TRUE.": "when calculation = 'relax','md','vc-md'"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "parameter is automatically set to .TRUE. when calculation is 'relax','md','vc-md'"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "dt",
        "Value_Type": "real",
        "Default_Values": {
            "default": "20.D0"
        },
        "Description": "dt\ntime step for molecular dynamics, in Rydberg atomic units (1 a.u.=4.8378 * 10^-17 s : Note, the Car\u2013Parrinello code uses Hartree atomic units, half that much!!!)",
        "Possible_Usage_Conditions": [
            "calculation = 'md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "outdir",
        "Value_Type": "character",
        "Default_Values": {
            "default": "value of ESPRESSO_TMPDIR if set",
            "if ESPRESSO_TMPDIR not set": "./"
        },
        "Description": "outdir\ninput, temporary, output files are found in this directory",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "wfcdir": "see also"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "wfcdir",
        "Value_Type": "character",
        "Default_Values": {
            "default": "same as outdir"
        },
        "Description": "wfcdir\nThis directory specifies where to store files generated by each processor (*.wfc{N}, *.igk{N}, etc.)",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": "Useful for machines without a parallel file system: set to local file system, while outdir should be a parallel or network file system, visible to all processors",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "outdir": "wfcdir can be set to local filesystem while outdir should be on parallel/network filesystem"
        },
        "Final_comments": "Note: in order to restart from interrupted runs, or to perform further calculations using the produced data files, you may need to copy files to outdir. Works only for pw.x.",
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "prefix",
        "Value_Type": "character",
        "Default_Values": {
            "default": "pwscf"
        },
        "Description": "prefix\nprepended to input/output filenames: prefix.wfc, prefix.rho, etc.",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "max_seconds",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D+7, or 150 days"
        },
        "Description": "max_seconds\nJobs stops after 'max_seconds' CPU time.",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": "Use this option in conjunction with option 'restart_mode' if you need to split a job too long to complete into shorter jobs that fit into your batch queues.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "restart_mode": "Used together when splitting long jobs"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "etot_conv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.0D-4"
        },
        "Description": "etot_conv_thr\nConvergence threshold on total energy (a.u) for ionic minimization: the convergence criterion is satisfied when the total energy changes less than 'etot_conv_thr' between two consecutive scf steps. Note that 'etot_conv_thr' is extensive, like the total energy.",
        "Possible_Usage_Conditions": [
            "total energy calculations",
            "Relaxation calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "forc_conv_thr": "both criteria must be satisfied"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "forc_conv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.0D-3"
        },
        "Description": "forc_conv_thr\nConvergence threshold on forces (a.u) for ionic minimization: the convergence criterion is satisfied when all components of all forces are smaller than 'forc_conv_thr'.",
        "Possible_Usage_Conditions": [
            "Relaxation calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "etot_conv_thr": "both criteria must be satisfied"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "disk_io",
        "Value_Type": "character",
        "Default_Values": {
            "scf": "low",
            "other cases": "medium"
        },
        "Description": "disk_io\nSpecifies the amount of disk I/O activity (only for binary files and xml data file in data directory; other files printed at each molecular dynamics / structural optimization step are not controlled by this option)",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "high": "save charge to disk at each SCF step, keep wavefunctions on disk (in \"distributed\" format), save mixing data as well",
            "medium": "save charge to disk at each SCF step, keep wavefunctions on disk only if more than one k-point per process is present, otherwise keep them in memory; save them to disk only at the end (in portable format)",
            "low": "save charge to disk at each SCF step, keep wavefunctions in memory (for all k-points), save them to disk only at the end (in portable format)",
            "nowf": "save to disk only the xml data file, never save wavefunctions and charge density",
            "minimal": "save to disk only the xml data file at convergence",
            "none": "do not save anything to disk"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "restart_mode": "no longer needed to specify high to restart from interrupted calculation"
        },
        "Final_comments": "Note that the needed RAM increases as disk I/O decreases",
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "pseudo_dir",
        "Value_Type": "character",
        "Default_Values": {
            "default": "$HOME/espresso/pseudo/",
            "if_ESPRESSO_PSEUDO_set": "$ESPRESSO_PSEUDO"
        },
        "Description": "pseudo_dir\nThe directory containing pseudopotential files",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "tefield",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "tefield\nIf .TRUE. a saw-like potential simulating an electric field is added to the bare ionic potential.",
        "Possible_Usage_Conditions": [
            "Ground state calculations",
            "Relaxation calculations",
            "tefield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "True": "A saw-like potential simulating an electric field is added to the bare ionic potential"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "edir": "Used to define form and size of added potential",
            "eamp": "Used to define form and size of added potential",
            "emaxpos": "Used to define form and size of added potential",
            "eopreg": "Used to define form and size of added potential"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "dipfield",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "dipfield\nIf .TRUE. and tefield = .TRUE. a dipole correction is also added to the bare ionic potential.",
        "Possible_Usage_Conditions": [
            "Slab systems",
            "Laue boundary conditions",
            "tefield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Must be used ONLY in a slab geometry, for surface calculations, with the discontinuity FALLING IN THE EMPTY SPACE.",
        "Parameter_Value_Conditions": {
            "True": "tefield must be True"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tefield": "must be True for dipfield to have effect",
            "edir": "used for form of correction",
            "emaxpos": "used for form of correction",
            "eopreg": "used for form of correction"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "lelfield",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "lelfield\nIf .TRUE. a homogeneous finite electric field described through the modern theory of the polarization is applied.",
        "Possible_Usage_Conditions": [
            "System with electric field"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tefield": "This is different from tefield = .true."
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "nberrycyc",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 1
        },
        "Description": "nberrycyc\nIn the case of a finite electric field it defines the number of iterations for converging the wavefunctions in the electric field Hamiltonian, for each external iteration on the charge density",
        "Possible_Usage_Conditions": [
            "lelfield = .TRUE.",
            "System with electric field"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when lelfield = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lelfield": "Must be .TRUE. for this parameter to be relevant"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "lorbm",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "lorbm\nIf .TRUE. perform orbital magnetization calculation.",
        "Possible_Usage_Conditions": [
            "calculation = 'nscf'",
            "norm-conserving pseudopotentials",
            "Uniform k-point grid",
            "Kubo terms"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Works ONLY with norm-conserving pseudopotentials. The type of calculation should be nscf and should be performed on an automatically generated uniform grid of k points.",
        "Parameter_Value_Conditions": {
            "TRUE": "Performs orbital magnetization calculation. If lelfield=.true., only Kubo terms are computed."
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lelfield": "If lelfield=.true., only Kubo terms are computed"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "lberry",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "lberry\nIf .TRUE. perform a Berry phase calculation.",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "gdir",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "gdir\nFor Berry phase calculation: direction of the k-point strings in reciprocal space, or direction of the field for calculations with finite electric fields",
        "Possible_Usage_Conditions": [
            "Berry phase calculations",
            "lelfield = .TRUE.",
            "System with electric field"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in Berry phase calculations or when lelfield=.true.",
        "Parameter_Value_Conditions": {
            "1": "first reciprocal lattice vector",
            "2": "second reciprocal lattice vector",
            "3": "third reciprocal lattice vector"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lelfield": "when lelfield=.true., gdir specifies the direction of the field"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "nppstr",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "nppstr\nFor Berry phase calculation: number of k-points to be calculated along each symmetry-reduced string. The same for calculation with finite electric fields (lelfield=.true.).",
        "Possible_Usage_Conditions": [
            "Berry phase calculations",
            "lelfield = .TRUE.",
            "System with electric field"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in Berry phase calculations and calculations with finite electric fields",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lelfield": "when lelfield=.true."
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "gate",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "gate\nIn the case of charged cells (tot_charge != 0) represents the counter charge (i.e. -tot_charge) not by a homogeneous background charge but with a charged plate, which is placed at zgate.",
        "Possible_Usage_Conditions": [
            "charged cells",
            "dipfield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in systems with charged cells where tot_charge is not zero. Systems that are not symmetric with respect to the plate need dipole correction enabled.",
        "Parameter_Value_Conditions": {
            "True": "When charged plate representation is needed instead of homogeneous background charge"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "zgate": "Position where charged plate is placed",
            "relaxz": "Related parameter",
            "block": "Related parameter",
            "block_1": "Related parameter",
            "block_2": "Related parameter",
            "block_height": "Related parameter",
            "dipfield": "Must be true for asymmetric systems",
            "nosym": "When false, verbosity is set to high"
        },
        "Final_comments": "Symmetry can be used with gate=.true. but carefully check that no symmetry is included which maps z to -z even if in principle one could still use them for symmetric systems.",
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "twochem",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "twochem\nIF .TRUE. , a two chemical potential calculation for the simulation of photoexcited systems is performed, constraining a fraction of the electrons in the conduction manifold.",
        "Possible_Usage_Conditions": [
            "occupations = 'smearing'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            ".TRUE.": "when performing two chemical potential calculation"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "occupations": "must be set to smearing",
            "nelec_cond": "related parameter",
            "nbnd_cond": "related parameter",
            "degauss_cond": "related parameter"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "lfcp",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "lfcp\nIf .TRUE. perform a constant bias potential (constant-mu) calculation for a system with ESM method. To perform the calculation, you must set a namelist FCP.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "ESM calculations",
            "Constant bias potential calculations",
            "Isolated (non-periodic) systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "'calculation' must be 'relax' or 'md'",
        "Parameter_Value_Conditions": {
            ".TRUE.": "assume_isolated = 'esm' and (esm_bc = 'bc2' or esm_bc = 'bc3' or (esm_bc = 'bc1' and trism = .TRUE.))"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "&FCP": "must be set when lfcp is .TRUE.",
            "assume_isolated": "must be 'esm'",
            "esm_bc": "must be 'bc2' or 'bc3', or 'bc1' with trism=.TRUE.",
            "ignore_wolfe": "is always .TRUE., for BFGS"
        },
        "Final_comments": "The total energy displayed in output includes the potentiostat contribution (-mu*N). ESM-RISM is also supported.",
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "trism",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "trism\nIf .TRUE. perform a 3D-RISM-SCF calculation. The solvent's distributions are calculated by 3D-RISM, though solute is treated as SCF. The charge density and the atomic positions are optimized, simultaneously with the solvents.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Requires setting namelist RISM and card SOLVENTS. If assume_isolated = 'esm' and esm_bc = 'bc1', Laue-RISM is calculated instead of 3D-RISM and coupled with ESM method.",
        "Parameter_Value_Conditions": {
            ".TRUE.": "When performing 3D-RISM-SCF or Laue-RISM calculation"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "&RISM": "Must be set when trism is .TRUE.",
            "SOLVENTS": "Must be set when trism is .TRUE.",
            "assume_isolated": "When set to 'esm' with esm_bc='bc1', triggers Laue-RISM instead of 3D-RISM",
            "mixing_beta": "Default value is 0.2 for both 3D-RISM and Laue-RISM",
            "ignore_wolfe": "Always .TRUE. for structural relaxation with BFGS"
        },
        "Final_comments": null,
        "Namelist": "&CONTROL"
    },
    {
        "Parameter_Name": "ibrav",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "ibrav\nBravais-lattice index",
        "Possible_Usage_Conditions": [
            "Bravais lattice structure (values 0 to 14)"
        ],
        "Required/Optional": "required",
        "Usage_Conditions": "Optional only if space_group is set. If ibrav /= 0, specify EITHER [ celldm(1)-celldm(6) ] OR [ A, B, C, cosAB, cosAC, cosBC ] but NOT both.",
        "Parameter_Value_Conditions": {
            "0": "free crystal axis provided in input via CELL_PARAMETERS",
            "1": "cubic P (sc)",
            "2": "cubic F (fcc)",
            "3": "cubic I (bcc)",
            "-3": "cubic I (bcc), more symmetric axis",
            "4": "Hexagonal and Trigonal P",
            "5": "Trigonal R, 3fold axis c",
            "-5": "Trigonal R, 3fold axis <111>",
            "6": "Tetragonal P (st)",
            "7": "Tetragonal I (bct)",
            "8": "Orthorhombic P",
            "9": "Orthorhombic base-centered(bco)",
            "-9": "Orthorhombic base-centered(bco), alternate description",
            "91": "Orthorhombic one-face base-centered A-type",
            "10": "Orthorhombic face-centered",
            "11": "Orthorhombic body-centered",
            "12": "Monoclinic P, unique axis c",
            "-12": "Monoclinic P, unique axis b",
            "13": "Monoclinic base-centered (unique axis c)",
            "-13": "Monoclinic base-centered (unique axis b)",
            "14": "Triclinic"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "CELL_PARAMETERS": "Required when ibrav=0",
            "celldm": "Sets lattice parameter alat in a.u.",
            "A, B, C, cosAB, cosAC, cosBC": "Sets lattice parameter alat in Angstrom"
        },
        "Final_comments": "IMPORTANT NOTICE 1: with ibrav=0 lattice vectors must be given with a sufficiently large number of digits and with the correct symmetry, or else symmetry detection may fail and strange problems may arise in symmetrization. IMPORTANT NOTICE 2: do not use celldm(1) or A as a.u. to Ang conversion factor, use the true lattice parameters or nothing, specify units in CELL_PARAMETERS and ATOMIC_POSITIONS",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "celldm",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "celldm(i), i=1,6\nCrystallographic constants - see the 'ibrav' parameter.",
        "Possible_Usage_Conditions": [
            "ibrav-defined crystal structure"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Specify either these OR A, B, C, cosAB, cosBC, cosAC NOT both. Only needed values (depending on 'ibrav') must be specified",
        "Parameter_Value_Conditions": {
            "celldm(1)": "is the lattice parameter \"a\" (in BOHR)",
            "celldm(1) when ibrav=0": "only celldm(1) is used if present"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ibrav": "depends on ibrav value",
            "CELL_PARAMETERS": "cell vectors are read from card CELL_PARAMETERS when ibrav=0",
            "A, B, C, cosAB, cosAC, cosBC": "mutually exclusive with celldm"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "A, B, C, cosAB, cosAC, cosBC",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "A, B, C, cosAB, cosAC, cosBC\nTraditional crystallographic constant A in ANGSTROM, also used as lattice parameter alat.\nTraditional crystallographic constant B in ANGSTROM.\nTraditional crystallographic constant C in ANGSTROM.\nCosine of the angle between axis a and b (gamma).\nCosine of the angle between axis a and c (beta).\nCosine of the angle between axis b and c (alpha).",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": "Specify either this OR celldm but NOT both. Only needed values (depending on ibrav) must be specified.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "celldm": "mutually exclusive",
            "CELL_PARAMETERS": "used when ibrav = 0",
            "ibrav": "depends on ibrav value"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nat",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "nat\nnumber of atoms in the unit cell (ALL atoms, except if space_group is set, in which case, INEQUIVALENT atoms)",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "required",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "space_group": "when space_group is set, nat refers to inequivalent atoms only"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ntyp",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "ntyp\nnumber of types of atoms in the unit cell",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "required",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nbnd",
        "Value_Type": "integer",
        "Default_Values": {
            "insulator": "number of valence bands (number_of_electrons/2)",
            "metal": "(number of valence bands)*1.2"
        },
        "Description": "nbnd\nNumber of electronic states (bands) to be calculated.",
        "Possible_Usage_Conditions": [
            "Insulating systems",
            "Metallic systems",
            "Spin-polarized calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Note that in spin-polarized calculations the number of k-point, not the number of bands per k-point, is doubled",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nbnd_cond",
        "Value_Type": "integer",
        "Default_Values": {
            "collinear": "nbnd - number_of_electrons / 2",
            "noncollinear": "nbnd - number_of_electrons"
        },
        "Description": "nbnd_cond\nNumber of electronic states in the conduction manifold for a two chemical-potential calculation (twochem = .True.)",
        "Possible_Usage_Conditions": [
            "Two-chemical-potential calculations",
            "Collinear magnetic calculations (LSDA)",
            "Non-collinear magnetic calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when twochem = .True.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "twochem": "must be .true.",
            "nbnd": "used in default value calculation"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "tot_charge",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.0
        },
        "Description": "tot_charge\nTotal charge of the system. Useful for simulations with charged cells.",
        "Possible_Usage_Conditions": [
            "charged cells"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when simulating systems with non-neutral charge states. In periodic calculations, a compensating jellium background is inserted for non-neutral cells.",
        "Parameter_Value_Conditions": {
            "0": "neutral cell",
            "+1": "one electron missing from the system",
            "-1": "one additional electron"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": "In a periodic calculation a compensating jellium background is inserted to remove divergences if the cell is not neutral.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "starting_charge",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.0
        },
        "Description": "starting_charge(i), i=1,ntyp\nstarting charge on atomic type 'i', to create starting potential with startingpot = 'atomic'.",
        "Possible_Usage_Conditions": [
            "charged cells"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "startingpot": "used when startingpot = 'atomic'"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "tot_magnetization",
        "Value_Type": "real",
        "Default_Values": {
            "default": -10000
        },
        "Description": "tot_magnetization\nTotal majority spin charge - minority spin charge. Used to impose a specific total electronic magnetization.",
        "Possible_Usage_Conditions": [
            "nspin = 2",
            "Collinear spin",
            "Magnetic systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "If unspecified then tot_magnetization parameter is ignored and the amount of electronic magnetization is determined during the self-consistent (scf) cycle.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "starting_magnetization",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0
        },
        "Description": "starting_magnetization(i), i=1,ntyp\nStarting spin polarization on atomic type i in a spin polarized (LSDA or noncollinear/spin-orbit) calculation.",
        "Possible_Usage_Conditions": [
            "calculation = 'nscf'",
            "noncollinear calculations",
            "spin-orbit calculations",
            "Magnetic systems",
            "Spin-orbit coupling",
            "Collinear magnetic calculations (LSDA)",
            "Non-collinear magnetic calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Must be specified if nonzero magnetization is expected in ground state, unless magnetization is constrained using tot_magnetization or constrained_magnetization parameters",
        "Parameter_Value_Conditions": {
            "-1 to 1": "For non-constrained calculations, representing all spins down to all spins up for valence electrons"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tot_magnetization": "Should not specify starting_magnetization if tot_magnetization is fixed",
            "constrained_magnetization": "Used for constraining magnetization in noncollinear/spin-orbit calculations"
        },
        "Final_comments": "NOTE 1: starting_magnetization is ignored in most BUT NOT ALL cases in non-scf calculations (nscf)\nNOTE 2: If you fix the magnetization with tot_magnetization, do not specify starting_magnetization\nNOTE 3: In the noncollinear/spin-orbit case, starting with zero starting_magnetization on all atoms imposes time reversal symmetry",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ecutwfc",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "ecutwfc\nkinetic energy cutoff (Ry) for wavefunctions",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "required",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ecutrho",
        "Value_Type": "real",
        "Default_Values": {
            "default": "4 * ecutwfc"
        },
        "Description": "ecutrho\nKinetic energy cutoff (Ry) for charge density and potential",
        "Possible_Usage_Conditions": [
            "Gradient-corrected functionals"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Value requirements vary based on the type of pseudopotential and functional being used",
        "Parameter_Value_Conditions": {
            "default": "norm-conserving pseudopotential",
            "8-12 * ecutwfc": "ultrasoft PP",
            "4 * ecutwfc": "PAW datasets (requires testing)",
            "higher than default": "gradient-corrected functional, cells with vacuum, or pseudopotential without non-linear core correction"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ecutwfc": "ecutrho is typically defined as a multiple of ecutwfc"
        },
        "Final_comments": "For norm-conserving pseudopotential, small reductions from default are possible but introduce noise in forces and stress. For PAW datasets, testing is mandatory due to augmentation charge shape dependency.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ecutfock",
        "Value_Type": "real",
        "Default_Values": {
            "default": "ecutrho"
        },
        "Description": "ecutfock\nKinetic energy cutoff (Ry) for the exact exchange operator in EXX type calculations",
        "Possible_Usage_Conditions": [
            "Exact exchange calculations",
            "Metallic systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in EXX calculations, can be reduced for speed-up at expense of accuracy. Not implemented for stress calculation and for US-PP and PAW pseudopotentials. Use with care, especially in metals where it may give raise to instabilities.",
        "Parameter_Value_Conditions": {
            "value": "Must be .gt. ecutwfc"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ecutrho": "default value is equal to ecutrho",
            "ecutwfc": "must be greater than ecutwfc"
        },
        "Final_comments": "Use with care, especially in metals where it may give raise to instabilities",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nr1, nr2, nr3",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "nr1, nr2, nr3\nThree-dimensional FFT mesh (hard grid) for charge density (and scf potential)",
        "Possible_Usage_Conditions": [
            "charge density calculations",
            "Hard FFT grid"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "If not specified the grid is calculated based on the cutoff for charge density (see also ecutrho)",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ecutrho": "grid is calculated based on ecutrho if nr1,nr2,nr3 not specified"
        },
        "Final_comments": "all three dimensions should be set, to use this parameter",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nr1s, nr2s, nr3s",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "nr1s, nr2s, nr3s\nThree-dimensional mesh for wavefunction FFT and for the smooth part of charge density ( smooth grid )",
        "Possible_Usage_Conditions": [
            "Smooth FFT grid",
            "Ultrasoft pseudopotentials",
            "PAW sets"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "all three dimensions should be set, to use this parameter",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "nr1, nr2, nr3": "Coincides with nr1, nr2, nr3 if ecutrho = 4 * ecutwfc",
            "ecutrho": "Coincides with nr1, nr2, nr3 if ecutrho = 4 * ecutwfc",
            "ecutwfc": "Coincides with nr1, nr2, nr3 if ecutrho = 4 * ecutwfc"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nosym",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "nosym\nControls whether symmetry is used in calculations",
        "Possible_Usage_Conditions": [
            "Dynamics calculations",
            "Low-symmetry large cells",
            "Isolated (non-periodic) systems",
            "custom k-points",
            "nosym k-points",
            "full BZ coverage"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "When .TRUE., symmetry is not used affecting k-points handling and charge density calculations",
        "Parameter_Value_Conditions": {
            ".TRUE.": "Disables symmetry usage, k-points list used as is, no symmetry-inequivalent k-points generation, no charge density symmetrization"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "noinv": "Time reversal symmetry assumes k and -k equivalence unless noinv=.true."
        },
        "Final_comments": "Do not use this option unless you know exactly what you want and what you get",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nosym_evc",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "nosym_evc\nif (.TRUE.) symmetry is not used, and k points are forced to have the symmetry of the Bravais lattice; an automatically generated Monkhorst-Pack grid will contain all points of the grid over the entire Brillouin Zone, plus the points rotated by the symmetries of the Bravais lattice which were not in the original grid. The same applies if a k-point list is provided in input instead of a Monkhorst-Pack grid. Time reversal symmetry is assumed so k and -k are equivalent unless noinv=.true. is specified.",
        "Possible_Usage_Conditions": [
            "Monkhorst-Pack grid",
            "custom k-points",
            "full BZ coverage"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "TRUE": "symmetry is not used, k points have Bravais lattice symmetry"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "noinv": "when noinv=.true., time reversal symmetry is not assumed"
        },
        "Final_comments": "This option differs from nosym because it forces k-points in all cases to have the full symmetry of the Bravais lattice (not all uniform grids have such property!)",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "noinv",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "noinv\nif (.TRUE.) disable the usage of k => -k symmetry (time reversal) in k-point generation",
        "Possible_Usage_Conditions": [
            "Non-collinear magnetic calculations",
            "custom k-points"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "no_t_rev",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "no_t_rev\nif (.TRUE.) disable the usage of magnetic symmetry operations that consist in a rotation + time reversal.",
        "Possible_Usage_Conditions": [
            "Magnetic systems",
            "Spin-polarized calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "force_symmorphic",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "force_symmorphic\nif (.TRUE.) force the symmetry group to be symmorphic by disabling symmetry operations having an associated fractionary translation",
        "Possible_Usage_Conditions": [
            "non-symmorphic symmetry operations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "use_all_frac",
        "Value_Type": "logical",
        "Default_Values": {
            "default": ".FALSE."
        },
        "Description": "use_all_frac\nControls whether FFT grids must be commensurate with fractionary translations of non-symmorphic symmetry operations",
        "Possible_Usage_Conditions": [
            "non-symmorphic symmetry operations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Parameter affects real-space FFT grids behavior with respect to non-symmorphic symmetry operations",
        "Parameter_Value_Conditions": {
            ".FALSE.": "force real-space FFT grids to be commensurate with fractionary translations of non-symmorphic symmetry operations",
            ".TRUE.": "do not impose any constraints to FFT grids, even in the presence of non-symmorphic symmetry operations"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": "use_all_frac=.TRUE. may lead to wrong results for hybrid functionals and phonon calculations. Both cases use symmetrization in real space that works for non-symmorphic operations only if the real-space FFT grids are commensurate.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "occupations",
        "Value_Type": "character",
        "Default_Values": {
            "default": null
        },
        "Description": "occupations\nControls how electronic occupations are determined",
        "Possible_Usage_Conditions": [
            "DOS calculations",
            "stress calculations",
            "Relaxation calculations",
            "Dynamics calculations",
            "Metallic systems",
            "Insulating systems",
            "Uniform k-point grid",
            "Single k-point",
            "occupations = 'smearing'",
            "Tetrahedron method (Bloechl's version)",
            "Linear tetrahedron method",
            "Optimized tetrahedron method",
            "Fixed occupations",
            "occupations = 'from_input'"
        ],
        "Required/Optional": null,
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "smearing": "for metals, requires parameters smearing and degauss",
            "tetrahedra": "requires uniform grid of k-points, suitable for DOS calculations, less suitable for force/optimization/dynamics calculations",
            "tetrahedra_lin": "original linear tetrahedron method, reference only",
            "tetrahedra_opt": "optimized tetrahedron method, can be used for phonon calculations",
            "fixed": "for insulators with a gap",
            "from_input": "valid only for single k-point, requires nbnd to be set in input, occupations should be consistent with tot_charge"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "smearing": "requires smearing and degauss parameters",
            "K_POINTS": "tetrahedra method requires uniform grid of k-points",
            "OCCUPATIONS": "from_input option requires occupations to be read from OCCUPATIONS card",
            "nbnd": "from_input option requires nbnd parameter to be set",
            "tot_charge": "from_input occupations should be consistent with tot_charge"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "one_atom_occupations",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "one_atom_occupations\nFlag used for isolated atoms (nat=1) together with occupations='from_input'. If TRUE, wavefunctions are ordered as atomic starting wavefunctions, independently from their eigenvalue. The occupations indicate which atomic states are filled.",
        "Possible_Usage_Conditions": [
            "single atom/isolated systems",
            "UPF pseudopotentials",
            "Non-collinear magnetic calculations",
            "Spin-orbit coupling",
            "starting_magnetization=0.0",
            "Isolated (non-periodic) systems",
            "occupations = 'from_input'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only for isolated atoms (nat=1) and when occupations='from_input'",
        "Parameter_Value_Conditions": {
            "TRUE": "When ordering of wavefunctions as atomic starting wavefunctions is needed"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "occupations": "Must be set to 'from_input'",
            "nat": "Must be 1",
            "starting_magnetization": "Equal to 0.0 for spin-orbit with time-reversal case",
            "starting_spin_angle": "Can be set to TRUE in magnetic case with spin-orbit"
        },
        "Final_comments": "The order of states is written inside the UPF pseudopotential file. Different ordering schemes exist for scalar relativistic case (S, P, D orbitals), noncollinear magnetic case (doubled states), and spin-orbit cases (spin-angle functions).",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "starting_spin_angle",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "starting_spin_angle\nControls the initialization of starting wavefunctions in spin-orbit case when domag = .TRUE. When set to .TRUE., initial wavefunctions are radial functions multiplied by spin-angle functions.",
        "Possible_Usage_Conditions": [
            "lspinorb = .True.",
            "Magnetic systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in spin-orbit cases. When lspinorb = .FALSE., this flag is not used. When domag = .FALSE., initial wavefunctions are always radial functions multiplied by spin-angle functions regardless of this flag.",
        "Parameter_Value_Conditions": {
            "True": "Initial wavefunctions are radial functions multiplied by spin-angle functions when domag = .TRUE.",
            "False": "Initial wavefunctions are initialized as in scalar relativistic noncollinear case without spin-orbit when domag = .TRUE."
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "domag": "Behavior depends on domag value",
            "lspinorb": "Parameter not used when lspinorb = .FALSE."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "degauss_cond",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.D0 Ry"
        },
        "Description": "degauss_cond\nvalue of the gaussian spreading (Ry) for brillouin-zone integration in the conduction manifold in a two-chemical potential calculation (twochem = .True.)",
        "Possible_Usage_Conditions": [
            "Two-chemical-potential calculations",
            "Smearing method"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in two-chemical potential calculations when twochem = .True.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "twochem": "Parameter is used when twochem = .True."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nelec_cond",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.D0"
        },
        "Description": "nelec_cond\nNumber of electrons placed in the conduction manifold in a two-chemical potential calculation (twochem = .True.). Of the total number of electrons nelec_cond will occupy the valence manifold and nelec_cond will be constrained in the conduction manifold.",
        "Possible_Usage_Conditions": [
            "Two-chemical-potential calculations",
            "valence and conduction manifolds"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in two-chemical potential calculations when twochem = .True.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "twochem": "Must be set to .true. for this parameter to be relevant"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "degauss",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.D0"
        },
        "Description": "degauss\nvalue of the gaussian spreading (Ry) for brillouin-zone integration in metals.",
        "Possible_Usage_Conditions": [
            "calculation = 'bands'",
            "Metallic systems",
            "partial occupations",
            "occupations = 'smearing'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "smearing",
        "Value_Type": "character",
        "Default_Values": {
            "default": "gaussian"
        },
        "Description": "smearing\nControls the type of smearing method to be used",
        "Possible_Usage_Conditions": [
            "Metallic systems",
            "Semiconductor systems",
            "partial occupations",
            "Smearing method"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "gaussian/gauss": "ordinary Gaussian spreading",
            "methfessel-paxton/m-p/mp": "Methfessel-Paxton first-order spreading, m-p, mp",
            "marzari-vanderbilt/cold/m-v/mv": "Marzari-Vanderbilt-DeVita-Payne cold smearing, cold, m-v, mv",
            "fermi-dirac/f-d/fd": "smearing with Fermi-Dirac function, f-d, fd"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "occupations": "gaussian smearing for metals occupations='smearing'",
            "degauss": "used in Gaussian smearing",
            "nspin": "for spin-polarized calculations",
            "constrained_magnetization": "for magnetic calculations"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nspin",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 1
        },
        "Description": "nspin\nControls spin polarization type in calculations",
        "Possible_Usage_Conditions": [
            "nspin = 1",
            "nspin = 2",
            "Collinear magnetic calculations (LSDA)",
            "Spin-polarized calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "1": "non-polarized calculation",
            "2": "spin-polarized calculation, LSDA (magnetization along z axis)",
            "4": "spin-polarized calculation, noncollinear (magnetization in generic direction)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "noncolin": "When nspin=4, do not specify nspin; use noncolin=.TRUE. instead",
            "tot_magnetization": "When nspin=2, specify tot_magnetization"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "sic_gamma",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0
        },
        "Description": "sic_gamma\nStrength of the gammaDFT potential.",
        "Possible_Usage_Conditions": [
            "gammaDFT calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "pol_type",
        "Value_Type": "character",
        "Default_Values": {
            "default": null
        },
        "Description": "pol_type\nType of polaron in gammaDFT.",
        "Possible_Usage_Conditions": [
            "gammaDFT calculations"
        ],
        "Required/Optional": null,
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "e": "electron polaron",
            "h": "hole polaron"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "sic_energy",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "sic_energy\nEnable the calculation of the total energy in gammaDFT. When .true., a preliminary calculation is performed to calculate the electron density in the absence of the polaron. When .false., the total energy printed in output should not be considered. For structural relaxations, it is recommended to use .false. to avoid doubling the computational cost.",
        "Possible_Usage_Conditions": [
            "gammaDFT calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "True": "When calculating total energy in gammaDFT",
            "False": "Recommended for structural relaxations to avoid doubling computational cost"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "sci_vb",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0
        },
        "Description": "sci_vb\nValence band shift (in eV) through self-consistent ('scf') scissor operator. When performing gammaDFT calculations of polarons, the polaron level is not shifted.",
        "Possible_Usage_Conditions": [
            "gammaDFT calculations",
            "Scissor operator corrections"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "sci_cb",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0
        },
        "Description": "sci_cb\nConduction band band shift (in eV) through self-consistent ('scf') scissor operator. When performing gammaDFT calculations of polarons, the polaron level is not shifted.",
        "Possible_Usage_Conditions": [
            "gammaDFT calculations",
            "Scissor operator corrections"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "noncolin",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "noncolin\nif .true. the program will perform a noncollinear calculation.",
        "Possible_Usage_Conditions": [
            "Relativistic pseudopotentials",
            "Non-collinear magnetic calculations",
            "Spin-orbit coupling"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "nspin": "when nspin=4, do not specify nspin; use noncolin=.TRUE. instead",
            "constrained_magnetization": "Used for constraining magnetization in noncollinear/spin-orbit calculations"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ecfixed",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.0
        },
        "Description": "ecfixed\nparameters for modified functional to be used in variable-cell molecular dynamics (or in stress calculation). ecfixed is the value (in Rydberg) of the constant-cutoff",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-md'",
            "stress calculations",
            "Exchange-correlation functional",
            "Variable cell calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "qcutz",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.0
        },
        "Description": "qcutz\nparameters for modified functional to be used in variable-cell molecular dynamics (or in stress calculation). qcutz is the height (in Rydberg) of the energy step for reciprocal vectors whose square modulus is greater than 'ecfixed'. In the kinetic energy, G^2 is replaced by G^2 + qcutz * (1 + erf ( (G^2 - ecfixed)/q2sigma) )",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-md'",
            "stress calculations",
            "Exchange-correlation functional",
            "variable cell calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ecfixed": "used together in energy step calculation",
            "q2sigma": "used together in kinetic energy calculation"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "q2sigma",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.1
        },
        "Description": "q2sigma\nparameters for modified functional to be used in variable-cell molecular dynamics (or in stress calculation). q2sigma is the width (in Rydberg) of the energy step for reciprocal vectors whose square modulus is greater than 'ecfixed'",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-md'",
            "stress calculations",
            "Exchange-correlation functional"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in the kinetic energy calculation where G^2 is replaced by G^2 + qcutz * (1 + erf ( (G^2 - ecfixed)/q2sigma) )",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ecfixed": "q2sigma defines width of energy step for reciprocal vectors with square modulus > ecfixed",
            "qcutz": "Used together in kinetic energy calculation"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "input_dft",
        "Value_Type": "character",
        "Default_Values": {
            "default": "read from pseudopotential files"
        },
        "Description": "input_dft\nExchange-correlation functional: eg 'PBE', 'BLYP' etc\nOverrides the value read from pseudopotential files.",
        "Possible_Usage_Conditions": [
            "Exchange-correlation functional"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Use with care and if you know what you are doing!",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ace",
        "Value_Type": "logical",
        "Default_Values": {
            "default": true
        },
        "Description": "ace\nUse Adaptively Compressed Exchange operator. Set to false to use standard Exchange (much slower)",
        "Possible_Usage_Conditions": [
            "Exchange-correlation functional"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "true": "Use Adaptively Compressed Exchange operator",
            "false": "Use standard Exchange (much slower)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "exx_fraction",
        "Value_Type": "real",
        "Default_Values": {
            "default": null,
            "PBE0": 0.25,
            "B3LYP": 0.2
        },
        "Description": "exx_fraction\nFraction of EXX for hybrid functional calculations",
        "Possible_Usage_Conditions": [
            "Hybrid functional calculations",
            "input_dft='PBE0', 'B3LYP'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in hybrid functional calculations",
        "Parameter_Value_Conditions": {
            "0.25": "When input_dft = 'PBE0'",
            "0.20": "When input_dft = 'B3LYP'"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "input_dft": "Determines default value based on functional type"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "screening_parameter",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.106
        },
        "Description": "screening_parameter\nscreening_parameter for HSE like hybrid functionals.",
        "Possible_Usage_Conditions": [
            "Hybrid functional calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "exxdiv_treatment",
        "Value_Type": "character",
        "Default_Values": {
            "default": "gygi-baldereschi"
        },
        "Description": "exxdiv_treatment\nSpecific for EXX. It selects the kind of approach to be used for treating the Coulomb potential divergencies at small q vectors.",
        "Possible_Usage_Conditions": [
            "Exact exchange calculations",
            "Hybrid functionals with exact exchange",
            "Cubic supercells",
            "Quasi-cubic supercells",
            "Anisotropic supercells"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "gygi-baldereschi": "appropriate for cubic and quasi-cubic supercells",
            "vcut_spherical": "appropriate for cubic and quasi-cubic supercells",
            "vcut_ws": "appropriate for strongly anisotropic supercells",
            "none": "sets Coulomb potential at G,q=0 to 0.0 (required for GAU-PBE)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ecutvcut": "related when using vcut_ws"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "x_gamma_extrapolation",
        "Value_Type": "logical",
        "Default_Values": {
            "default": ".true."
        },
        "Description": "x_gamma_extrapolation\nSpecific for EXX. If .true., extrapolate the G=0 term of the potential (see README in examples/EXX_example for more)",
        "Possible_Usage_Conditions": [
            "Exact exchange calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in EXX calculations",
        "Parameter_Value_Conditions": {
            ".false.": "Required for GAU-PBE"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ecutvcut",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.0 Ry"
        },
        "Description": "ecutvcut\nReciprocal space cutoff for correcting Coulomb potential divergencies at small q vectors.",
        "Possible_Usage_Conditions": [
            "Hybrid functional calculations",
            "Exact exchange calculations",
            "long-range interactions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "exxdiv_treatment": "See: exxdiv_treatment"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nqx1, nqx2, nqx3",
        "Value_Type": "integer",
        "Default_Values": {
            "default": "the size of the k-point mesh used"
        },
        "Description": "nqx1, nqx2, nqx3\nThree-dimensional mesh for q (k1-k2) sampling of the Fock operator (EXX). Can be smaller than the number of k-points.",
        "Possible_Usage_Conditions": [
            "Exact exchange calculations",
            "Hybrid functionals with exact exchange",
            "custom k-points"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "K_POINTS": "defaults to its size"
        },
        "Final_comments": "Currently this defaults to the size of the k-point mesh used.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "localization_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.0
        },
        "Description": "localization_thr\nOverlap threshold over which the exchange integral over a pair of localized orbitals is included in the evaluation of EXX operator. Any value greater than 0.0 triggers the SCDM localization and the evaluation on EXX using the localized orbitals. Very small value of the threshold should yield the same result as the default EXX evaluation",
        "Possible_Usage_Conditions": [
            "Exact exchange calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            ">0.0": "triggers SCDM localization and EXX evaluation using localized orbitals",
            "very small": "yields same result as default EXX evaluation"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "Hubbard_occ",
        "Value_Type": "real",
        "Default_Values": {
            "default": "read from pseudopotentials"
        },
        "Description": "Hubbard_occ(ityp,i)\nHubbard occupations is the number of electrons in the Hubbard manifold. By default they are initialized by reading the occupations from pseudopotentials. If specified from the input, then the values read from the pseudopotentials will be overwritten.",
        "Possible_Usage_Conditions": [
            "DFT+U Hubbard correction",
            "LDA+U calculations",
            "Strongly correlated electrons",
            "Transition Metals",
            "Rare Earth Elements",
            "Pseudopotentials with Hubbard occupation"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "The second index of the Hubbard_occ array corresponds to the Hubbard manifold number. It is possible to specify up to three Hubbard manifolds per Hubbard atom. However, if you want to specify three manifolds then the second and the third manifolds will be considered as one effective manifold.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "Hubbard_alpha",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.D0 for all species"
        },
        "Description": "Hubbard_alpha(i), i=1,ntyp\nHubbard_alpha(i) is the perturbation (on atom i, in eV) used to compute U (and V) with the linear-response method.",
        "Possible_Usage_Conditions": [
            "Linear-response calculations",
            "HP code calculations",
            "DFT+U Hubbard correction",
            "DFT+U+V Hubbard correction"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "(only for DFT+U or DFT+U+V)",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": "Note: Hubbard U and V can be computed using the HP code which is based on density-functional perturbation theory, and it gives exactly the same result as the method of Cococcioni and de Gironcoli.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "Hubbard_beta",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.D0 for all species"
        },
        "Description": "Hubbard_beta(i), i=1,ntyp\nHubbard_beta(i) is the perturbation (on atom i, in eV) used to compute J0 with the linear-response method.",
        "Possible_Usage_Conditions": [
            "Linear-response calculations",
            "DFT+U Hubbard correction",
            "DFT+U+V Hubbard correction"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "only for DFT+U or DFT+U+V",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "&SYSTEM": "parameter belongs to this namelist"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "starting_ns_eigenvalue",
        "Value_Type": "real",
        "Default_Values": {
            "default": "-1.d0"
        },
        "Description": "starting_ns_eigenvalue(m,ispin,ityp)\nIn the first iteration of an DFT+U run it overwrites the m-th eigenvalue of the ns occupation matrix for the ispin component of atomic species ityp.",
        "Possible_Usage_Conditions": [
            "DFT+U Hubbard correction",
            "Collinear magnetic calculations (LSDA)",
            "Non-collinear magnetic calculations",
            "occupations = 'from_input'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in first iteration of DFT+U calculations. For noncollinear case, ispin index runs up to npol=2. The value lmax is given by the maximum angular momentum number to which the Hubbard U is applied.",
        "Parameter_Value_Conditions": {
            "-1.d0": "parameter not set",
            "other values": "overwrites eigenvalue of ns occupation matrix"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "HUBBARD": "related to maximum angular momentum number for Hubbard U"
        },
        "Final_comments": "Leave unchanged eigenvalues that are not set. This is useful to suggest the desired orbital occupations when the default choice takes another path.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "dmft",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "dmft\nIf true, nscf calculation will exit in restart mode, scf calculation will restart from there if DMFT updates are provided as hdf5 archive.",
        "Possible_Usage_Conditions": [
            "calculation = 'nscf'",
            "custom k-points",
            "nosym k-points"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Should be used only with electron_maxstep = 1. K_POINTS have to be identical and given explicitly with nosym.",
        "Parameter_Value_Conditions": {
            "True": "nscf calculation will exit in restart mode, scf calculation will restart from there if DMFT updates are provided as hdf5 archive"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "electron_maxstep": "must be 1",
            "K_POINTS": "must be identical and given explicitly with nosym"
        },
        "Final_comments": "Quantum Espresso must be compiled with hdf5 support",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "dmft_prefix",
        "Value_Type": "character",
        "Default_Values": {
            "default": "prefix"
        },
        "Description": "dmft_prefix\nprepended to hdf5 archive: dmft_prefix.h5\n\nDMFT update should be provided in group/dataset as:\n- dft_misc_input/band_window with dimension [1, number of k-points, 2 (real + complex)]\n- dft_update/delta_N with dimension [number of k-points, number of correlated orbitals, number of correlated orbitals, 2 (real + complex)]",
        "Possible_Usage_Conditions": [
            "Dynamical Mean Field Theory",
            "Correlated orbitals"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ensemble_energies",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "ensemble_energies\nIf ensemble_energies = .true., an ensemble of xc energies is calculated non-selfconsistently ('nscf') for perturbed exchange-enhancement factors and LDA vs. PBE correlation ratios after each converged electronic ground state calculation.",
        "Possible_Usage_Conditions": [
            "BEEF-type functionals"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Can be used when performing non-self-consistent calculations with BEEF-type functionals",
        "Parameter_Value_Conditions": {
            ".true.": "When ensemble energy calculation is needed"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "input_dft": "Must be set to a BEEF-type functional (e.g. BEEF-vdW)"
        },
        "Final_comments": "Requires linking against libbeef. Ensemble energies can be analyzed with the 'bee' utility included with libbeef.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "edir",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "edir\nThe direction of the electric field or dipole correction is parallel to the bg(:,edir) reciprocal lattice vector, so the potential is constant in planes defined by FFT grid points",
        "Possible_Usage_Conditions": [
            "tefield = .TRUE.",
            "System with electric field"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only if tefield = .TRUE.",
        "Parameter_Value_Conditions": {
            "1": null,
            "2": null,
            "3": null
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tefield": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "emaxpos",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.5D0"
        },
        "Description": "emaxpos\nPosition of the maximum of the saw-like potential along crystal axis edir, within the unit cell, 0 < emaxpos < 1",
        "Possible_Usage_Conditions": [
            "tefield = .TRUE.",
            "0 < emaxpos < 1"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only if tefield = .TRUE.",
        "Parameter_Value_Conditions": {
            "emaxpos": "0 < emaxpos < 1"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tefield": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "eopreg",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.1D0"
        },
        "Description": "eopreg\nZone in the unit cell where the saw-like potential decreases.",
        "Possible_Usage_Conditions": [
            "tefield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only if tefield = .TRUE.",
        "Parameter_Value_Conditions": {
            "eopreg": "0 < eopreg < 1"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tefield": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "eamp",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.001 a.u."
        },
        "Description": "eamp\nAmplitude of the electric field, in Hartree a.u.; 1 a.u. = 51.4220632*10^10 V/m.",
        "Possible_Usage_Conditions": [
            "tefield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only if tefield = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "edir": "The saw-like potential changes are measured in units of this crystal vector",
            "emaxpos": "Defines the region where potential increases",
            "eopreg": "Defines the region where potential increases and decreases"
        },
        "Final_comments": "The saw-like potential increases with slope eamp in the region from (emaxpos+eopreg-1) to (emaxpos), then decreases to 0 until (emaxpos+eopreg). The change of slope of this potential must be located in the empty region, or else unphysical forces will result.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "angle1",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "angle1(i), i=1,ntyp\nThe angle expressed in degrees between the initial magnetization and the z-axis.",
        "Possible_Usage_Conditions": [
            "Non-collinear magnetic calculations",
            "Initial magnetization",
            "Magnetic systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "For noncollinear calculations only; index i runs over the atom types.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "angle2",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "angle2(i), i=1,ntyp\nThe angle expressed in degrees between the projection of the initial magnetization on x-y plane and the x-axis.",
        "Possible_Usage_Conditions": [
            "Non-collinear magnetic calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "For noncollinear calculations only.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "lforcet",
        "Value_Type": "logical",
        "Default_Values": {
            "default": null
        },
        "Description": "lforcet\nWhen starting a non collinear calculation using an existing density file from a collinear lsda calculation assumes previous density points in z direction and rotates it in the direction described by 'angle1' and 'angle2' parameters for atomic type 1",
        "Possible_Usage_Conditions": [
            "Non-collinear calculations",
            "Non-collinear magnetic calculations",
            "Collinear magnetic calculations (LSDA)",
            "Magnetic systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when starting non collinear calculation with existing density file from collinear lsda calculation",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "angle1": "Used to describe rotation direction",
            "angle2": "Used to describe rotation direction"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "constrained_magnetization",
        "Value_Type": "character",
        "Default_Values": {
            "default": "none"
        },
        "Description": "constrained_magnetization\nUsed to perform constrained calculations in magnetic systems.",
        "Possible_Usage_Conditions": [
            "Magnetic systems",
            "Non-collinear magnetic calculations",
            "Collinear magnetic calculations (LSDA)"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "none": "no constraint",
            "total": "total magnetization is constrained by adding a penalty term to total energy, noncolinear case only",
            "atomic": "atomic magnetization are constrained to defined starting magnetization",
            "total direction": "angle theta of total magnetization with z axis is constrained",
            "atomic direction": "only cosine of angle1 of atomic magnetic moment is constrained"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tot_magnetization": "use for LSDA when constrained_magnetization=total",
            "starting_magnetization": "used to define mcons array for atomic constraint",
            "angle1": "used for atomic direction constraint and noncollinear atomic constraint",
            "angle2": "used for noncollinear atomic constraint",
            "nosym": "may be needed to reach desired magnetization orientation",
            "noncolin": "for noncollinear calculations",
            "lambda": "used for constrained_magnetization calculations"
        },
        "Final_comments": "Note: symmetrization may prevent to reach the desired orientation of the magnetization. Try not to start with very highly symmetric configurations or use the nosym flag (only as a last remedy)",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "fixed_magnetization",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.d0"
        },
        "Description": "fixed_magnetization(i), i=1,3\ntotal magnetization vector (x,y,z components) to be kept fixed when constrained_magnetization='total'",
        "Possible_Usage_Conditions": [
            "Constrained magnetization",
            "Magnetic systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when constrained_magnetization='total'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "constrained_magnetization": "Parameter is used when constrained_magnetization='total'"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "lambda",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.d0"
        },
        "Description": "lambda\nparameter used for constrained_magnetization calculations",
        "Possible_Usage_Conditions": [
            "Constrained magnetization"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in constrained_magnetization calculations",
        "Parameter_Value_Conditions": {
            "smaller_value": "if scf calculation does not converge, try to reduce lambda",
            "larger_value": "after convergence, restart with larger lambda"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "constrained_magnetization": "See constrained_magnetization"
        },
        "Final_comments": "if the scf calculation does not converge, try to reduce lambda to obtain convergence, then restart the run with a larger lambda",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "report",
        "Value_Type": "integer",
        "Default_Values": {
            "default": -1
        },
        "Description": "report\ndetermines when atomic magnetic moments are printed on output",
        "Possible_Usage_Conditions": [
            "Magnetic systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "0": "never",
            "-1": "at the beginning of the scf and at convergence",
            "N": "as -1, plus every N scf iterations"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "lspinorb",
        "Value_Type": "logical",
        "Default_Values": {
            "default": null
        },
        "Description": "lspinorb\nif .TRUE. the noncollinear code can use a pseudopotential with spin-orbit.",
        "Possible_Usage_Conditions": [
            "pseudopotentials with spin-orbit coupling",
            "Non-collinear magnetic calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "assume_isolated",
        "Value_Type": "character",
        "Default_Values": {
            "default": "none"
        },
        "Description": "assume_isolated\nUsed to perform calculation assuming the system to be isolated (a molecule or a cluster in a 3D supercell)",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-relax'",
            "Cubic supercells",
            "2D periodic systems in x-y plane",
            "Isolated (non-periodic) systems",
            "charged slabs",
            "vacuum boundaries",
            "electrode boundaries",
            "optional electric field"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "none": "regular periodic calculation w/o any correction",
            "makov-payne": "ONLY FOR CUBIC SYSTEMS (ibrav=1,2,3)",
            "esm": "Requires cell with a_3 lattice vector along z, normal to the xy plane, with the slab centered around z=0",
            "2D": "The length of the unit-cell along the z direction should be larger than twice the thickness of the 2D material"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "esm_bc": "Used with esm to choose boundary conditions",
            "esm_efield": "Used with esm for optional electric field",
            "esm_w": "Related to esm",
            "esm_nfit": "Related to esm",
            "cell_dofree": "Should be set to \"2Dxy\" when using 2D option in vc-relax calculations"
        },
        "Final_comments": "For 2D option: there is a lower limit of 20 bohr imposed by the cutoff radius used to read pseudopotentials. Linear-response calculations done on top of a self-consistent calculation with this flag will automatically be performed in the 2D framework as well.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "esm_bc",
        "Value_Type": "character",
        "Default_Values": {
            "default": "pbc"
        },
        "Description": "esm_bc\nIf assume_isolated = 'esm', determines the boundary conditions used for either side of the slab.",
        "Possible_Usage_Conditions": [
            "ESM calculations",
            "Slab systems",
            "Isolated (non-periodic) systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when assume_isolated = 'esm'",
        "Parameter_Value_Conditions": {
            "pbc": "regular periodic calculation (no ESM)",
            "bc1": "Vacuum-slab-vacuum (open boundary conditions)",
            "bc2": "Metal-slab-metal (dual electrode configuration)",
            "bc3": "Vacuum-slab-metal"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "assume_isolated": "must be set to 'esm'",
            "esm_efield": "related when bc2 is used"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "esm_w",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.d0"
        },
        "Description": "esm_w\ndetermines the position offset [in a.u.] of the start of the effective screening region, measured relative to the cell edge. (ESM region begins at z = +/- [L_z/2 + esm_w] )",
        "Possible_Usage_Conditions": [
            "ESM calculations",
            "periodic cell with defined z-direction",
            "Isolated (non-periodic) systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when assume_isolated = \"esm\"",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "assume_isolated": "Parameter is used when assume_isolated = \"esm\""
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "esm_efield",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.d0"
        },
        "Description": "esm_efield\ngives the magnitude of the electric field [Ry/a.u.] to be applied between semi-infinite ESM electrodes",
        "Possible_Usage_Conditions": [
            "ESM calculations",
            "Isolated (non-periodic) systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when assume_isolated = \"esm\" and esm_bc = \"bc2\"",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "assume_isolated": "must be set to \"esm\"",
            "esm_bc": "must be set to \"bc2\""
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "esm_nfit",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 4
        },
        "Description": "esm_nfit\ngives the number of z-grid points for the polynomial fit along the cell edge",
        "Possible_Usage_Conditions": [
            "assume_isolated must be set to 'esm'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when assume_isolated = \"esm\"",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "assume_isolated": "Parameter is only used when assume_isolated = \"esm\""
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "lgcscf",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false,
            "mixing_beta with ESM-RISM": 0.1,
            "mixing_beta without ESM-RISM": 0.2,
            "diago_thr_init": "1.D-5",
            "diago_full_acc": true,
            "diago_rmm_conv": true
        },
        "Description": "lgcscf\nIf .TRUE. perform a constant bias potential (constant-mu) calculation with Grand-Canonical SCF.",
        "Possible_Usage_Conditions": [
            "GC-SCF calculations",
            "Constant bias potential calculations",
            "RISM calculations",
            "Isolated (non-periodic) systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "assume_isolated = 'esm' and (esm_bc = 'bc2' or 'bc3') must be set in SYSTEM namelist. ESM-RISM is also supported (assume_isolated = 'esm' and esm_bc = 'bc1' and trism = .TRUE.)",
        "Parameter_Value_Conditions": {
            "mixing_mode": "must be 'TF' or 'local-TF', default is 'TF'"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "assume_isolated": "must be 'esm'",
            "esm_bc": "must be 'bc2' or 'bc3', or 'bc1' with trism=.TRUE.",
            "trism": "must be .TRUE. when using ESM-RISM with esm_bc='bc1'"
        },
        "Final_comments": "The total energy displayed in output includes the potentiostat contribution (-mu*N).",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "gcscf_mu",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "gcscf_mu\nThe target Fermi energy (eV) of GC-SCF",
        "Possible_Usage_Conditions": [
            "GC-SCF calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "One can start with appropriate total charge of the system by giving 'tot_charge'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tot_charge": "Can be used to start with appropriate total charge"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "gcscf_conv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-2"
        },
        "Description": "gcscf_conv_thr\nConvergence threshold of Fermi energy (eV) for GC-SCF.",
        "Possible_Usage_Conditions": [
            "GC-SCF calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "gcscf_beta",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.05D0"
        },
        "Description": "gcscf_beta\nMixing factor for GC-SCF.",
        "Possible_Usage_Conditions": [
            "GC-SCF calculations",
            "DOS of materials",
            "Materials like graphite",
            "Grand canonical ensemble"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Larger values are recommended if systems with small DOS on Fermi surface as graphite.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "vdw_corr",
        "Value_Type": "character",
        "Default_Values": {
            "default": "none"
        },
        "Description": "vdw_corr\nType of Van der Waals correction.",
        "Possible_Usage_Conditions": [
            "DFT-D calculations",
            "DFT-D2 calculations",
            "DFT-D3 calculations",
            "Tkatchenko-Scheffler dispersion corrections",
            "Many-body dispersion (MBD) corrections",
            "Exchange-hole dipole-moment model",
            "Materials with long-range interaction",
            "Isolated (non-periodic) systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "grimme-d2/Grimme-D2/DFT-D/dft-d": "For Semiempirical Grimme's DFT-D2",
            "grimme-d3/Grimme-D3/DFT-D3/dft-d3": "For Semiempirical Grimme's DFT-D3",
            "TS/ts/ts-vdw/ts-vdW/tkatchenko-scheffler": "For Tkatchenko-Scheffler dispersion corrections",
            "MBD/mbd/many-body-dispersion/mbd_vdw": "For Many-body dipersion correction",
            "XDM/xdm": "For Exchange-hole dipole-moment model"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "london_s6": "When using Grimme-D2",
            "london_rcut": "When using Grimme-D2",
            "london_c6": "When using Grimme-D2",
            "london_rvdw": "When using Grimme-D2",
            "dftd3_version": "When using Grimme-D3",
            "dftd3_threebody": "When using Grimme-D3",
            "ts_vdw_econv_thr": "When using Tkatchenko-Scheffler",
            "ts_vdw_isolated": "When using Tkatchenko-Scheffler or MBD",
            "xdm_a1": "When using XDM",
            "xdm_a2": "When using XDM",
            "input_dft": "For non-local functionals (vdw-DF)"
        },
        "Final_comments": "Note that non-local functionals (eg vdw-DF) are NOT specified here but in 'input_dft'",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "london_s6",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.75
        },
        "Description": "london_s6\nglobal scaling parameter for DFT-D. Default is good for PBE.",
        "Possible_Usage_Conditions": [
            "DFT-D calculations",
            "dispersion correction calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "london_c6",
        "Value_Type": "real",
        "Default_Values": {
            "default": "standard Grimme-D2 values"
        },
        "Description": "london_c6(i), i=1,ntyp\natomic C6 coefficient of each atom type",
        "Possible_Usage_Conditions": [
            "dispersion correction calculations",
            "DFT-D2 calculations",
            "Materials with long-range interaction"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "london_rvdw",
        "Value_Type": "real",
        "Default_Values": {
            "default": "standard Grimme-D2 values"
        },
        "Description": "london_rvdw(i), i=1,ntyp\natomic vdw radii of each atom type",
        "Possible_Usage_Conditions": [
            "dispersion correction calculations",
            "DFT-D2 calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "london_rcut",
        "Value_Type": "real",
        "Default_Values": {
            "default": 200
        },
        "Description": "london_rcut\ncutoff radius (a.u.) for dispersion interactions",
        "Possible_Usage_Conditions": [
            "dispersion correction calculations",
            "DFT-D calculations",
            "Materials with long-range interaction"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "dftd3_version",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 3
        },
        "Description": "dftd3_version\nVersion of Grimme implementation of Grimme-D3",
        "Possible_Usage_Conditions": [
            "DFT-D calculations",
            "DFT-D2 calculations",
            "DFT-D3 calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "2": "Original Grimme-D2 parametrization",
            "3": "Grimme-D3 (zero damping)",
            "4": "Grimme-D3 (BJ damping)",
            "5": "Grimme-D3M (zero damping)",
            "6": "Grimme-D3M (BJ damping)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": "NOTE: not all functionals are parametrized.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "dftd3_threebody",
        "Value_Type": "logical",
        "Default_Values": {
            "default": true
        },
        "Description": "dftd3_threebody\nTurn three-body terms in Grimme-D3 on. If .false. two-body contributions only are computed, using two-body parameters of Grimme-D3.",
        "Possible_Usage_Conditions": [
            "DFT-D3 calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "False": "two-body contributions only are computed, using two-body parameters of Grimme-D3"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "dftd3_version": "If dftd3_version=2, three-body contribution is always disabled"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ts_vdw_econv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-6"
        },
        "Description": "ts_vdw_econv_thr\ncontrols the convergence of the vdW energy (and forces). The default value is a safe choice, likely too safe, but you do not gain much in increasing it",
        "Possible_Usage_Conditions": [
            "dispersion correction calculations",
            "DFT-D calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "ts_vdw_isolated",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "ts_vdw_isolated\nset it to .TRUE. when computing the Tkatchenko-Scheffler vdW energy or the Many-Body dispersion (MBD) energy for an isolated (non-periodic) system.",
        "Possible_Usage_Conditions": [
            "dispersion correction calculations",
            "Tkatchenko-Scheffler dispersion corrections",
            "Many-body dispersion (MBD) corrections",
            "Non-periodic systems",
            "Isolated (non-periodic) systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used for isolated (non-periodic) systems when computing vdW or MBD energy",
        "Parameter_Value_Conditions": {
            "TRUE": "when computing Tkatchenko-Scheffler vdW energy or MBD energy for isolated systems"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "xdm_a1",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.6836
        },
        "Description": "xdm_a1\nDamping function parameter a1 (adimensional)",
        "Possible_Usage_Conditions": [
            "functional is NOT one of: B86bPBE, PW86PBE, PBE, BLYP"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "It is NOT necessary to give a value if the functional is one of B86bPBE, PW86PBE, PBE, BLYP",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "xdm_a2",
        "Value_Type": "real",
        "Default_Values": {
            "default": 1.5045
        },
        "Description": "xdm_a2\nDamping function parameter a2 (angstrom)",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": "It is NOT necessary to give a value if the functional is one of B86bPBE, PW86PBE, PBE, BLYP",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "space_group",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 0
        },
        "Description": "space_group\nThe number of the space group of the crystal, as given in the International Tables of Crystallography A (ITA). This allows to give in input only the inequivalent atomic positions. The positions of all the symmetry equivalent atoms are calculated by the code.",
        "Possible_Usage_Conditions": [
            "symmetry-defined crystal structure"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only when the atomic positions are of type crystal_sg",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "uniqueb": null,
            "origin_choice": null,
            "rhombohedral": null
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "uniqueb",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "uniqueb\nUsed for monoclinic lattices to specify the orientation of the twofold axis or mirror normal",
        "Possible_Usage_Conditions": [
            "Monoclinic systems",
            "ibrav = -12",
            "ibrav = -13"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only for monoclinic lattices",
        "Parameter_Value_Conditions": {
            "True": "twofold axis or mirror normal is parallel to b axis",
            "False": "twofold axis or mirror normal is parallel to c axis"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ibrav": "Used with ibrav values -12 or -13"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "origin_choice",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 1
        },
        "Description": "origin_choice\nUsed only for space groups that in the ITA allow the use of two different origins. origin_choice=1, means the first origin, while origin_choice=2 is the second origin.",
        "Possible_Usage_Conditions": [
            "symmetry-defined crystal structure"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only for space groups that in the ITA allow the use of two different origins",
        "Parameter_Value_Conditions": {
            "1": "first origin",
            "2": "second origin"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "rhombohedral",
        "Value_Type": "logical",
        "Default_Values": {
            "default": true
        },
        "Description": "rhombohedral\nControls whether the coordinates of inequivalent atoms are given with respect to rhombohedral axes (TRUE) or hexagonal axes (FALSE). When FALSE, coordinates are internally converted to rhombohedral axes.",
        "Possible_Usage_Conditions": [
            "rhombohedral space group",
            "ibrav = 5"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only for rhombohedral space groups",
        "Parameter_Value_Conditions": {
            "TRUE": "coordinates given with respect to rhombohedral axes",
            "FALSE": "coordinates given with respect to hexagonal axes"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ibrav": "ibrav = 5 is used in both cases"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "zgate",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.5
        },
        "Description": "zgate\nSpecifies the position of the charged plate which represents the counter charge in doped systems (tot_charge != 0). In units of the unit cell length in z direction, zgate in range of 0,1",
        "Possible_Usage_Conditions": [
            "charged slabs"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "used only if (gate = .TRUE.)",
        "Parameter_Value_Conditions": {
            "0-1": "zgate in range of 0,1"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tot_charge": "tot_charge != 0",
            "gate": "gate = .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "relaxz",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "relaxz\nAllows the relaxation of the system towards the charged plate.",
        "Possible_Usage_Conditions": [
            "Relaxation calculations",
            "gate = .TRUE.",
            "dipfield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "used only if (gate = .TRUE.)",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "block": "Use with block=.TRUE. to create potential barrier to avoid atoms moving to plate position",
            "dipfield": "Use with dipfield=.TRUE. to avoid atoms moving to dipole correction position"
        },
        "Final_comments": "Use carefully and utilize either a layer of fixed atoms or a potential barrier to avoid the atoms moving to the position of the plate or the dipole of the dipole correction.",
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "block",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "block\nAdds a potential barrier to the total potential seen by the electrons to mimic a dielectric in field effect configuration and/or to avoid electrons spilling into the vacuum region for electron doping. Potential barrier is from 'block_1' to 'block_2' and has a height of 'block_height'.",
        "Possible_Usage_Conditions": [
            "gate = .TRUE.",
            "dipfield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "used only if (gate = .TRUE.)",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "block_1": "defines start of potential barrier",
            "block_2": "defines end of potential barrier",
            "block_height": "defines height of potential barrier",
            "eopreg": "used for smooth increase/decrease of potential barrier when dipfield=.TRUE.",
            "dipfield": "affects potential barrier behavior"
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "block_1",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.45
        },
        "Description": "block_1\nlower beginning of the potential barrier, in units of the unit cell size along z, block_1 in range of 0,1",
        "Possible_Usage_Conditions": [
            "gate = .TRUE.",
            "block = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "used only if (gate = .TRUE. and block=.TRUE.)",
        "Parameter_Value_Conditions": {
            "0-1": "block_1 in range of 0,1"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "gate": "must be .TRUE.",
            "block": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "block_2",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.55
        },
        "Description": "block_2\nupper beginning of the potential barrier, in units of the unit cell size along z, block_2 in range of 0,1",
        "Possible_Usage_Conditions": [
            "gate = .TRUE.",
            "block = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "used only if (gate = .TRUE. and block=.TRUE.)",
        "Parameter_Value_Conditions": {
            "0-1": "block_2 in range of 0,1"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "gate": "must be .TRUE.",
            "block": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "block_height",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.1
        },
        "Description": "block_height\nHeight of the potential barrier in Rydberg.",
        "Possible_Usage_Conditions": [
            "gate = .TRUE.",
            "block = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "used only if (gate = .TRUE. and block=.TRUE.)",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "gate": "must be .TRUE.",
            "block": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "nextffield",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 0
        },
        "Description": "nextffield\nNumber of activated external ionic force fields.",
        "Possible_Usage_Conditions": [
            "Relaxation calculations",
            "calculation = 'md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&SYSTEM"
    },
    {
        "Parameter_Name": "electron_maxstep",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 100
        },
        "Description": "electron_maxstep\nmaximum number of iterations in a scf step. If exact exchange is active, this will affect the inner loops.",
        "Possible_Usage_Conditions": [
            "calculation = 'scf'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "exx_maxstep",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 100
        },
        "Description": "exx_maxstep\nmaximum number of outer iterations in a scf calculation with exact exchange.",
        "Possible_Usage_Conditions": [
            "Exact exchange calculations",
            "Hybrid functional calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "scf_must_converge",
        "Value_Type": "logical",
        "Default_Values": {
            "default": ".TRUE."
        },
        "Description": "scf_must_converge\nIf .false. do not stop molecular dynamics or ionic relaxation when 'electron_maxstep' is reached. Use with care.",
        "Possible_Usage_Conditions": [
            "Dynamics calculations",
            "Relaxation calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            ".false.": "allows continuation of MD/ionic relaxation even if electron_maxstep is reached"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "electron_maxstep": "referenced when scf_must_converge is .false."
        },
        "Final_comments": "Use with care.",
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "conv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-6"
        },
        "Description": "conv_thr\nConvergence threshold for selfconsistency, estimated energy error < conv_thr (note that conv_thr is extensive, like the total energy)",
        "Possible_Usage_Conditions": [
            "calculation = 'scf'",
            "calculation = 'nscf'"
        ],
        "Required/Optional": "required",
        "Usage_Conditions": "Used in self-consistent calculations ('scf') for convergence threshold. For non-self-consistent calculations ('nscf'), used to set default threshold value for iterative diagonalization",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "diago_thr_init": "In nscf calculations, conv_thr is used to set the default value of the threshold (ethr) for iterative diagonalization"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "adaptive_thr",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "adaptive_thr\nIf .TRUE. this turns on the use of an adaptive 'conv_thr' for the inner scf loops when using EXX.",
        "Possible_Usage_Conditions": [
            "Exact exchange calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used for inner scf loops when using EXX",
        "Parameter_Value_Conditions": {
            ".TRUE.": "turns on adaptive conv_thr for inner scf loops with EXX"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "conv_thr": "adaptive_thr controls its adaptive behavior"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "conv_thr_init",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-3"
        },
        "Description": "conv_thr_init\nWhen adaptive_thr = .TRUE. this is the convergence threshold used for the first scf cycle.",
        "Possible_Usage_Conditions": [
            "calculation = 'scf'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when adaptive_thr is set to .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "adaptive_thr": "Parameter is used when adaptive_thr = .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "conv_thr_multi",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-1"
        },
        "Description": "conv_thr_multi\nWhen adaptive_thr = .TRUE. the convergence threshold for each scf cycle is given by: max( conv_thr, conv_thr_multi * dexx )",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used when adaptive_thr is TRUE",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "adaptive_thr": "Used when adaptive_thr = .TRUE.",
            "conv_thr": "Used in max function with conv_thr_multi * dexx"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "mixing_mode",
        "Value_Type": "character",
        "Default_Values": {
            "default": "plain"
        },
        "Description": "mixing_mode\nControls the type of charge density mixing method",
        "Possible_Usage_Conditions": [
            "homogeneous systems",
            "inhomogeneous systems",
            "Smearing method"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "plain": "charge density Broyden mixing",
            "TF": "charge density Broyden mixing with simple Thomas-Fermi screening (for highly homogeneous systems)",
            "local-TF": "charge density Broyden mixing with local-density-dependent TF screening (for highly inhomogeneous systems)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "Used in SCF calculations",
            "mixing_beta": "Used in SCF calculations",
            "smearing": "Used in SCF calculations"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "mixing_beta",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.7D0"
        },
        "Description": "mixing_beta\nmixing factor for self-consistency ('scf')",
        "Possible_Usage_Conditions": [
            "Smearing method"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "mixing_mode": "Used in SCF calculations",
            "smearing": "Used in SCF calculations"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "mixing_ndim",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 8
        },
        "Description": "mixing_ndim\nnumber of iterations used in mixing scheme.",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": "If you are tight with memory, you may reduce it to 4 or so.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "mixing_fixed_ns",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 0
        },
        "Description": "mixing_fixed_ns\nFor DFT+U : number of iterations with fixed ns ( ns is the atomic density appearing in the Hubbard term )",
        "Possible_Usage_Conditions": [
            "DFT+U Hubbard correction"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in DFT+U calculations",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "HUBBARD": "Used with Hubbard calculations"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diagonalization",
        "Value_Type": "character",
        "Default_Values": {
            "default": "david"
        },
        "Description": "diagonalization\nSpecifies the type of diagonalization method to be used",
        "Possible_Usage_Conditions": [
            "calculation = 'bands'",
            "Conjugate gradient diagonalization",
            "Davidson diagonalization",
            "PPCG diagonalization",
            "Paro diagonalization",
            "RMM-DIIS diagonalization"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "david": "Davidson iterative diagonalization with overlap matrix. Fast, may in some rare cases fail.",
            "cg": "Conjugate-gradient-like band-by-band diagonalization. MUCH slower than david but uses less memory and is (a little bit) more robust.",
            "ppcg": "PPCG iterative diagonalization",
            "paro": "ParO iterative diagonalization",
            "ParO": "ParO iterative diagonalization",
            "rmm-davidson": "RMM-DIIS iterative diagonalization. To stabilize the SCF loop RMM-DIIS is alternated with calls to Davidson solver",
            "rmm-paro": "RMM-DIIS iterative diagonalization. To stabilize the SCF loop RMM-DIIS is alternated with calls to ParO solver"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "diago_rmm_ndim": "Can be used to tune RMM-DIIS behavior",
            "diago_rmm_conv": "Can be used to tune RMM-DIIS behavior"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diago_thr_init",
        "Value_Type": "real",
        "Default_Values": {
            "default": null,
            "scf_atomic_orbitals": "1.D-2",
            "scf_charge_density": "1.D-5",
            "non_scf": "(conv_thr/N elec)/10"
        },
        "Description": "diago_thr_init\nConvergence threshold (ethr) for iterative diagonalization (the check is on eigenvalue convergence)",
        "Possible_Usage_Conditions": [
            "calculation = 'nscf'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "During self consistency (scf) the threshold is automatically reduced (but never below 1.D-13) when approaching convergence",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "conv_thr": "Used in non-scf calculations default value calculation"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diago_cg_maxiter",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "diago_cg_maxiter\nFor conjugate gradient diagonalization: max number of iterations",
        "Possible_Usage_Conditions": [
            "Conjugate gradient diagonalization",
            "Conjugate gradient diagonalization"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diago_ppcg_maxiter",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "diago_ppcg_maxiter\nFor ppcg diagonalization: max number of iterations",
        "Possible_Usage_Conditions": [
            "PPCG diagonalization"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diago_david_ndim",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 2
        },
        "Description": "diago_david_ndim\nFor Davidson diagonalization: dimension of workspace (number of wavefunction packets, at least 2 needed)",
        "Possible_Usage_Conditions": [
            "Davidson diagonalization"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used in Davidson diagonalization algorithm. Larger values use more memory and CPU time in subspace diagonalization but may reduce number of iterations",
        "Parameter_Value_Conditions": {
            "2": "minimum required value",
            "4": "recommended if not tight on memory and if time spent in subspace diagonalization is small compared to h_psi"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diago_rmm_ndim",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 4
        },
        "Description": "diago_rmm_ndim\nFor RMM-DIIS diagonalization: dimension of workspace (number of wavefunction packets, at least 2 needed)",
        "Possible_Usage_Conditions": [
            "RMM-DIIS diagonalization"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            ">=2": "at least 2 needed"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diago_rmm_conv",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "diago_rmm_conv\nIf .TRUE., RMM-DIIS is performed up to converge. If .FALSE., RMM-DIIS is performed only once.",
        "Possible_Usage_Conditions": [
            "RMM-DIIS diagonalization"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "True": "RMM-DIIS is performed up to converge",
            "False": "RMM-DIIS is performed only once"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diago_gs_nblock",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 16
        },
        "Description": "diago_gs_nblock\nFor RMM-DIIS diagonalization: blocking size of Gram-Schmidt orthogonalization",
        "Possible_Usage_Conditions": [
            "RMM-DIIS diagonalization"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "diago_full_acc",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "diago_full_acc\nIf .TRUE. all the empty states are diagonalized at the same level of accuracy of the occupied ones. Otherwise the empty states are diagonalized using a larger threshold (this should not affect total energy, forces, and other ground-state properties).",
        "Possible_Usage_Conditions": [
            "Conjugate gradient diagonalization",
            "calculation = 'bands'",
            "Systems with empty states"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "True": "empty states are diagonalized at same accuracy level as occupied ones",
            "False": "empty states are diagonalized using larger threshold"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "efield",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.D0"
        },
        "Description": "efield\nAmplitude of the finite electric field (in Ry a.u.; 1 a.u. = 36.3609*10^10 V/m)",
        "Possible_Usage_Conditions": [
            "Non-automatic k-points",
            "lelfield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only if lelfield = .TRUE. and if k-points (K_POINTS card) are not automatic",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lelfield": "must be TRUE",
            "K_POINTS": "must not be automatic"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "efield_cart",
        "Value_Type": "real",
        "Default_Values": {
            "default": "(0.D0, 0.D0, 0.D0)"
        },
        "Description": "efield_cart(i), i=1,3\nFinite electric field (in Ry a.u.=36.3609*10^10 V/m) in cartesian axis.",
        "Possible_Usage_Conditions": [
            "Automatic k-points",
            "lelfield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Used only if lelfield = .TRUE. and if k-points (K_POINTS card) are automatic.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "K_POINTS": "must be automatic",
            "lelfield": "must be TRUE"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "efield_phase",
        "Value_Type": "character",
        "Default_Values": {
            "default": "none"
        },
        "Description": "efield_phase\nControls the handling of electronic polarization phase",
        "Possible_Usage_Conditions": [
            "lelfield = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "read": "set the zero of the electronic polarization (with lelfield=.true..) to the result of a previous calculation",
            "write": "write on disk data on electronic polarization to be read in another calculation",
            "none": "none of the above points"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lelfield": "must be .true. when using read option"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "startingpot",
        "Value_Type": "character",
        "Default_Values": {
            "default": {
                "scf": "atomic",
                "relax": "atomic",
                "md": "atomic",
                "vc-relax": "atomic",
                "vc-md": "atomic",
                "bands": "file",
                "nscf": "file"
            }
        },
        "Description": "startingpot\nSpecifies the type of starting potential to use",
        "Possible_Usage_Conditions": [],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "atomic": "starting potential from atomic charge superposition",
            "file": "start from existing \"charge-density.xml\" file in the directory specified by parameters prefix and outdir"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "prefix": "used when startingpot = \"file\"",
            "outdir": "used when startingpot = \"file\""
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "startingwfc",
        "Value_Type": "character",
        "Default_Values": {
            "default": "atomic+random"
        },
        "Description": "startingwfc\nSpecifies how the initial wavefunctions are generated",
        "Possible_Usage_Conditions": [
            "calculation = 'scf'",
            "calculation = 'nscf'",
            "High symmetry systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": {
            "atomic": "Start from superposition of atomic orbitals. If not enough atomic orbitals are available, fill with random numbers the remaining wfcs. The scf typically starts better with this option, but in some high-symmetry cases one can \"loose\" valence states, ending up in the wrong ground state.",
            "atomic+random": "As above, plus a superimposed \"randomization\" of atomic orbitals. Prevents the \"loss\" of states mentioned above.",
            "random": "Start from random wfcs. Slower start of scf but safe. It may also reduce memory usage in conjunction with diagonalization='cg'.",
            "file": "Start from an existing wavefunction file in the directory specified by parameters 'prefix' and 'outdir'."
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "diagonalization": "When startingwfc='random', it may reduce memory usage with diagonalization='cg'",
            "prefix": "When startingwfc='file', uses directory specified by prefix",
            "outdir": "When startingwfc='file', uses directory specified by outdir"
        },
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "tqr",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "tqr\nIf .true., use a real-space algorithm for augmentation charges of ultrasoft pseudopotentials and PAWsets. Faster but numerically less accurate than the default G-space algorithm. Use with care and after testing!",
        "Possible_Usage_Conditions": [
            "Ultrasoft pseudopotentials",
            "PAW sets"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "real_space",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "real_space\nIf .true., exploit real-space localization to compute matrix elements for nonlocal projectors. Faster and in principle better scaling than the default G-space algorithm, but numerically less accurate, may lead to some loss of translational invariance. Use with care and after testing.",
        "Possible_Usage_Conditions": [
            "nonlocal pseudopotentials"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": null,
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&ELECTRONS"
    },
    {
        "Parameter_Name": "ion_positions",
        "Value_Type": "character",
        "Default_Values": {
            "default": "default"
        },
        "Description": "ion_positions\nControls how atomic positions are determined, either from restart file or standard input depending on the option chosen",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "required",
        "Usage_Conditions": "",
        "Parameter_Value_Conditions": {
            "default": "if restarting, use atomic positions read from the restart file; in all other cases, use atomic positions from standard input",
            "from_input": "read atomic positions from standard input, even if restarting"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "ion_velocities",
        "Value_Type": "character",
        "Default_Values": {
            "default": "default"
        },
        "Description": "ion_velocities\nInitial ionic velocities.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": {
            "default": "start a new simulation from random thermalized distribution of velocities if tempw is set, with zero velocities otherwise; restart from atomic velocities read from the restart file",
            "from_input": "start or continue the simulation with atomic velocities read from standard input - see card ATOMIC_VELOCITIES"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ATOMIC_VELOCITIES": "required when ion_velocities = 'from_input'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "ion_dynamics",
        "Value_Type": "character",
        "Default_Values": {
            "calculation=relax": "bfgs",
            "calculation=md": "verlet",
            "calculation=vc-relax": "bfgs",
            "calculation=vc-md": "beeman"
        },
        "Description": "ion_dynamics\nSpecify the type of ionic dynamics.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "Variable cell calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": {
            "bfgs": "for calculation='relax' or 'vc-relax', uses BFGS quasi-newton algorithm based on trust radius procedure",
            "damp": "for calculation='relax': damped quick-min Verlet dynamics, for calculation='vc-relax': damped Beeman dynamics",
            "fire": "for calculation='relax', uses FIRE minimization algorithm with semi-implicit Euler integration",
            "verlet": "for calculation='md', uses Verlet algorithm to integrate Newton's equation",
            "langevin": "for calculation='md', ion dynamics is over-damped Langevin",
            "langevin-smc": "for calculation='md', over-damped Langevin with Smart Monte Carlo",
            "beeman": "for calculation='vc-md', uses Beeman algorithm to integrate Newton's equation"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "CONSTRAINTS": "can be used with 'damp' and 'fire' for constrained optimization, and with 'verlet' for constrained dynamics",
            "cell_dynamics": "for vc-relax with 'bfgs', requires cell_dynamics='bfgs'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "pot_extrapolation",
        "Value_Type": "character",
        "Default_Values": {
            "default": "atomic"
        },
        "Description": "pot_extrapolation\nUsed to extrapolate the potential from preceding ionic steps.",
        "Possible_Usage_Conditions": [
            "Dynamics calculations",
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": {
            "none": "no extrapolation",
            "atomic": "extrapolate the potential as if it was a sum of atomic-like orbitals",
            "first_order": "extrapolate the potential with first-order formula",
            "second_order": "extrapolate the potential with second order formula"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "'relax', 'md', 'vc-relax', or 'vc-md'"
        },
        "Final_comments": "'first_order' and 'second-order' extrapolation make sense only for molecular dynamics ('md') calculations",
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "wfc_extrapolation",
        "Value_Type": "character",
        "Default_Values": {
            "default": "none"
        },
        "Description": "wfc_extrapolation\nUsed to extrapolate the wavefunctions from preceding ionic steps.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": {
            "none": "no extrapolation",
            "first_order": "extrapolate the wave-functions with first-order formula",
            "second_order": "extrapolate the wave-functions with second order formula"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "'first_order' and 'second-order' extrapolation make sense only for molecular dynamics ('md') calculations"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "remove_rigid_rot",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "remove_rigid_rot\nThis keyword is useful when simulating the dynamics and/or the thermodynamics of an isolated system. If set to true the total torque of the internal forces is set to zero by adding new forces that compensate the spurious interaction with the periodic images. This allows for the use of smaller supercells.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "Isolated (non-periodic) systems"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": "Note: since the potential energy is no longer consistent with the forces (it still contains the spurious interaction with the repeated images), the total energy is not conserved anymore. However the dynamical and thermodynamical properties should be in closer agreement with those of an isolated system. Also the final energy of a structural relaxation ('relax') will be higher, but the relaxation itself should be faster.",
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "ion_temperature",
        "Value_Type": "character",
        "Default_Values": {
            "default": "not_controlled"
        },
        "Description": "ion_temperature\nControls the ionic temperature using different methods",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": {
            "rescaling": "control ionic temperature via velocity rescaling (first method), see parameters tempw, tolp, and nraise (for calculation = vc-md only). This rescaling method is the only one currently implemented in VC-MD",
            "rescale-v": "control ionic temperature via velocity rescaling (second method), see parameters tempw and nraise",
            "rescale-T": "scale temperature of the thermostat every nraise steps by delta_t, starting from tempw. The temperature is controlled via velocitiy rescaling",
            "reduce-T": "reduce temperature of the thermostat every nraise steps by the (negative) value delta_t, starting from tempw. If delta_t is positive, the target temperature is augmented. The temperature is controlled via velocitiy rescaling",
            "berendsen": "control ionic temperature using soft velocity rescaling - see parameters tempw and nraise",
            "andersen": "control ionic temperature using Andersen thermostat see parameters tempw and nraise",
            "svr": "control ionic temperature using stochastic-velocity rescaling with parameters tempw and nraise",
            "initial": "initialize ion velocities to temperature tempw and leave uncontrolled further on",
            "not_controlled": "(default) ionic temperature is not controlled"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tempw": "used with most temperature control methods",
            "nraise": "used with most temperature control methods",
            "tolp": "used with rescaling method",
            "delta_t": "used with rescale-T and reduce-T methods"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "tempw",
        "Value_Type": "real",
        "Default_Values": {
            "default": "300.D0"
        },
        "Description": "tempw\nStarting temperature (Kelvin) in MD runs target temperature for most thermostats.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "tolp",
        "Value_Type": "real",
        "Default_Values": {
            "default": "100.D0"
        },
        "Description": "tolp\nTolerance for velocity rescaling. Velocities are rescaled if the run-averaged and target temperature differ more than 'tolp'.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "delta_t",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D0"
        },
        "Description": "delta_t\nControls temperature modification in molecular dynamics simulations depending on ion_temperature setting",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": {
            "positive": "when ion_temperature = 'rescale-T': instantaneous temperature is multiplied by delta_t through velocity rescaling",
            "negative": "when ion_temperature = 'reduce-T': temperature is reduced by -delta_t every 'nraise' steps"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_temperature": "must be either 'rescale-T' or 'reduce-T'",
            "nraise": "used when ion_temperature = 'reduce-T'"
        },
        "Final_comments": "For delta_t < 0, the actual average rate of heating or cooling should be roughly C*delta_t/(nraise*dt) (C=1 for an ideal gas, C=0.5 for a harmonic solid, theorem of energy equipartition between all quadratic degrees of freedom). The instantaneous temperature is calculated at the end of every ionic move and BEFORE rescaling. This is the temperature reported in the main output.",
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "nraise",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 1
        },
        "Description": "nraise\nControls various temperature-related behaviors depending on ion_temperature:\n- For 'reduce-T': Controls steps before temperature reduction by delta_t\n- For 'rescale-v': Controls steps before average temperature rescaling to tempw\n- For 'rescaling' with vc-md: Controls steps before instantaneous temperature rescaling to tempw\n- For 'berendsen': Defines rise time parameter (tau = nraise*dt)\n- For 'andersen': Defines collision frequency parameter (nu*dt = 1/nraise)\n- For 'svr': Sets characteristic time of thermostat (tau = nraise*dt)",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'",
        "Parameter_Value_Conditions": {
            "nraise*dt": "when ion_temperature = 'berendsen' or 'svr'",
            "1/nraise": "when ion_temperature = 'andersen'"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_temperature": {
                "reduce-T": "temperature reduction by delta_t",
                "rescale-v": "average temperature rescaling to tempw",
                "rescaling": "instantaneous temperature rescaling to tempw (with vc-md)",
                "berendsen": "rise time parameter calculation",
                "andersen": "collision frequency parameter calculation",
                "svr": "characteristic time setting"
            },
            "calculation": "must be one of: relax, md, vc-relax, or vc-md"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "refold_pos",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "refold_pos\nIf true the ions are refolded at each step into the supercell.",
        "Possible_Usage_Conditions": [
            "calculation = 'md'",
            "calculation = 'relax'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'damp'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md'. Applies only in the case of calculation = 'md' or damped dynamics (ion_dynamics = 'damp')",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "must be 'md' or ion_dynamics must be 'damp'",
            "ion_dynamics": "can be 'damp'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "upscale",
        "Value_Type": "real",
        "Default_Values": {
            "default": "100.D0"
        },
        "Description": "upscale\nMax reduction factor for 'conv_thr' during structural optimization",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'bfgs'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'bfgs'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "conv_thr": "'conv_thr' is automatically reduced when the relaxation approaches convergence so that forces are still accurate, but 'conv_thr' will not be reduced to less that conv_thr / upscale"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "bfgs_ndim",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 1
        },
        "Description": "bfgs_ndim\nNumber of old forces and displacements vectors used in the PULAY mixing of the residual vectors obtained on the basis of the inverse hessian matrix given by the BFGS algorithm. When bfgs_ndim = 1, the standard quasi-Newton BFGS method is used.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'bfgs'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'bfgs'",
        "Parameter_Value_Conditions": {
            "1": "standard quasi-Newton BFGS method is used"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'",
            "ion_dynamics": "must be 'bfgs'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "trust_radius_max",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.8D0"
        },
        "Description": "trust_radius_max\nMaximum ionic displacement in the structural relaxation.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'bfgs'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'bfgs'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'",
            "ion_dynamics": "must be 'bfgs'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "trust_radius_min",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-3"
        },
        "Description": "trust_radius_min\nMinimum ionic displacement in the structural relaxation",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'bfgs'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'bfgs'",
        "Parameter_Value_Conditions": {
            "trust_radius < trust_radius_min": "BFGS is reset"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_dynamics": "must be bfgs",
            "calculation": "must be one of: relax, md, vc-relax, or vc-md"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "trust_radius_ini",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.5D0"
        },
        "Description": "trust_radius_ini\nInitial ionic displacement in the structural relaxation.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'bfgs'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'bfgs'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'",
            "ion_dynamics": "must be 'bfgs'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "w_1",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.01D0"
        },
        "Description": "w_1\nParameters used in line search based on the Wolfe conditions.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'bfgs'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'bfgs'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_dynamics": "must be 'bfgs'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "w_2",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.5D0"
        },
        "Description": "w_2\nParameters used in line search based on the Wolfe conditions.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'bfgs'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'bfgs'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'",
            "ion_dynamics": "must be 'bfgs'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "fire_alpha_init",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.2D0"
        },
        "Description": "fire_alpha_init\nInitial value of the alpha mixing factor in the FIRE minimization scheme; recommended values are between 0.1 and 0.3",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'fire'",
        "Parameter_Value_Conditions": {
            "0.1-0.3": "recommended values"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'",
            "ion_dynamics": "must be 'fire'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "fire_falpha",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.99D0"
        },
        "Description": "fire_falpha\nScaling of the alpha mixing parameter for steps with P > 0",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'fire'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'",
            "ion_dynamics": "must be 'fire'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "fire_nmin",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 5
        },
        "Description": "fire_nmin\nMinimum number of steps with P > 0 before increase of 'dt'",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'fire'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'",
            "ion_dynamics": "must be 'fire'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "fire_f_inc",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.1D0"
        },
        "Description": "fire_f_inc\nFactor for increasing 'dt'",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'fire'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'fire'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_dynamics": "must be 'fire'",
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "fire_f_dec",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.5D0"
        },
        "Description": "fire_f_dec\nFactor for decreasing 'dt'",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "ion_dynamics = 'fire'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'fire'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_dynamics": "must be 'fire'",
            "calculation": "must be one of: 'relax', 'md', 'vc-relax', or 'vc-md'"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "fire_dtmax",
        "Value_Type": "real",
        "Default_Values": {
            "default": "10.D0"
        },
        "Description": "fire_dtmax\nDetermines the maximum value of 'dt' in the FIRE minimization; dtmax = fire_dtmax*dt",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "relevant when calculation = 'relax', 'md', 'vc-relax', or 'vc-md' AND ion_dynamics = 'fire'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "dt": "dtmax = fire_dtmax*dt"
        },
        "Final_comments": null,
        "Namelist": "&IONS"
    },
    {
        "Parameter_Name": "cell_dynamics",
        "Value_Type": "character",
        "Default_Values": {
            "default": null,
            "vc-relax": "bfgs"
        },
        "Description": "cell_dynamics\nSpecify the type of dynamics for the cell.",
        "Possible_Usage_Conditions": [
            "Dynamics calculations",
            "Variable cell calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only in 'vc-relax' or 'vc-md' calculation",
        "Parameter_Value_Conditions": {
            "none": "no dynamics (both vc-relax and vc-md)",
            "damp-pr": "damped (Beeman) dynamics of the Parrinello-Rahman extended lagrangian (vc-relax)",
            "damp-w": "damped (Beeman) dynamics of the new Wentzcovitch extended lagrangian (vc-relax)",
            "bfgs": "BFGS quasi-newton algorithm (vc-relax)",
            "pr": "(Beeman) molecular dynamics of the Parrinello-Rahman extended lagrangian (vc-md)",
            "w": "(Beeman) molecular dynamics of the new Wentzcovitch extended lagrangian (vc-md)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_dynamics": "must be 'bfgs' when cell_dynamics='bfgs'"
        },
        "Final_comments": null,
        "Namelist": "&CELL"
    },
    {
        "Parameter_Name": "press",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.D0"
        },
        "Description": "press\nTarget pressure [KBar] in a variable-cell md or relaxation run.",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "variable cell calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only in 'vc-relax' or 'vc-md' calculation",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CELL"
    },
    {
        "Parameter_Name": "wmass",
        "Value_Type": "real",
        "Default_Values": {
            "Parrinello-Rahman MD": "0.75*Tot_Mass/pi^2",
            "Wentzcovitch MD": "0.75*Tot_Mass/pi^2/Omega^(2/3)"
        },
        "Description": "wmass\nFictitious cell mass [amu] for variable-cell simulations (both 'vc-md' and 'vc-relax')",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "Parrinello-Rahman MD",
            "Wentzcovitch MD",
            "Variable cell calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only in 'vc-relax' or 'vc-md' calculation",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CELL"
    },
    {
        "Parameter_Name": "cell_factor",
        "Value_Type": "real",
        "Default_Values": {
            "default": "2.0 for variable-cell calculations"
        },
        "Description": "cell_factor\nUsed in the construction of the pseudopotential tables. It should exceed the maximum linear contraction of the cell during a simulation.",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "Variable cell calculations",
            "pseudopotential tables"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only in 'vc-relax' or 'vc-md' calculation",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&CELL"
    },
    {
        "Parameter_Name": "press_conv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.5D0 Kbar"
        },
        "Description": "press_conv_thr\nConvergence threshold on the pressure for parameter cell relaxation",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'",
            "Variable cell calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only in 'vc-relax' or 'vc-md' calculation",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": "note that the other convergence thresholds for ionic relaxation apply as well",
        "Namelist": "&CELL"
    },
    {
        "Parameter_Name": "cell_dofree",
        "Value_Type": "character",
        "Default_Values": {
            "default": "all"
        },
        "Description": "cell_dofree\nSelect which of the cell parameters should be moved",
        "Possible_Usage_Conditions": [
            "calculation = 'vc-relax'",
            "calculation = 'vc-md'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only in vc-relax or vc-md calculation",
        "Parameter_Value_Conditions": {
            "all": "all axis and angles are moved",
            "ibrav": "all axis and angles are moved, but the lattice remains consistent with the initial ibrav choice",
            "a": "the x component of axis 1 (v1_x) is fixed",
            "b": "the y component of axis 2 (v2_y) is fixed",
            "c": "the z component of axis 3 (v3_z) is fixed",
            "fixa": "axis 1 (v1_x,v1_y,v1_z) is fixed",
            "fixb": "axis 2 (v2_x,v2_y,v2_z) is fixed",
            "fixc": "axis 3 (v3_x,v3_y,v3_z) is fixed",
            "x": "only the x component of axis 1 (v1_x) is moved",
            "y": "only the y component of axis 2 (v2_y) is moved",
            "z": "only the z component of axis 3 (v3_z) is moved",
            "xy": "only v1_x and v2_y are moved",
            "xz": "only v1_x and v3_z are moved",
            "yz": "only v2_y and v3_z are moved",
            "xyz": "only v1_x, v2_y, v3_z are moved",
            "shape": "all axis and angles, keeping the volume fixed",
            "volume": "the volume changes, keeping all angles fixed (i.e. only celldm(1) changes)",
            "2Dxy": "only x and y components are allowed to change",
            "2Dshape": "as above, keeping the area in xy plane fixed",
            "epitaxial_ab": "fix axis 1 and 2 while allowing axis 3 to move",
            "epitaxial_ac": "fix axis 1 and 3 while allowing axis 2 to move",
            "epitaxial_bc": "fix axis 2 and 3 while allowing axis 1 to move"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ibrav": "can be combined with other options using ibrav+option format"
        },
        "Final_comments": "Note: if axis are not orthogonal, some of these options do not work (symmetry is broken).",
        "Namelist": "&CELL"
    },
    {
        "Parameter_Name": "fcp_mu",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "fcp_mu\nThe target Fermi energy (eV). Fictitious Charge Particle (FCP) The FCP method introduces a fictitious particle with an assigned charge to facilitate simulations under constant chemical potential conditions.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "constant chemical potential conditions"
        ],
        "Required/Optional": "required",
        "Usage_Conditions": "Only if lfcp = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lfcp": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_dynamics",
        "Value_Type": "character",
        "Default_Values": {
            "calculation = relax": "bfgs",
            "calculation = md": "velocity-verlet"
        },
        "Description": "fcp_dynamics\nSpecify the type of dynamics for the Fictitious Charge Particle (FCP).",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = 'relax' and 'md'",
        "Parameter_Value_Conditions": {
            "bfgs": "calculation = 'relax'",
            "newton": "calculation = 'relax'",
            "damp": "calculation = 'relax'",
            "lm": "calculation = 'relax'",
            "velocity-verlet": "calculation = 'md'",
            "verlet": "calculation = 'md'"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_dynamics": {
                "bfgs": "must be bfgs",
                "newton": "must be damp",
                "damp": "must be damp",
                "lm": "must be damp",
                "velocity-verlet": "must be verlet",
                "verlet": "must be verlet"
            }
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_conv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-2"
        },
        "Description": "fcp_conv_thr\nConvergence threshold on force (eV) for Fictitious Charge Particle (FCP) relaxation.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = 'relax' and 'md'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lfcp": "must be .TRUE.",
            "calculation": "must be 'relax' or 'md'"
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_ndiis",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 4
        },
        "Description": "fcp_ndiis\nSize of Direct Inversion in the Iterative Subspace (DIIS) for Fictitious Charge Particle (FCP) relaxation, used only if fcp_dynamics = 'newton'",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = 'relax' and 'md'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lfcp": "must be .TRUE.",
            "calculation": "must be 'relax' or 'md'",
            "fcp_dynamics": "only used if equal to 'newton'"
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_mass",
        "Value_Type": "real",
        "Default_Values": {
            "default": null,
            "ESM": "5.D+6 / (xy area)",
            "ESM-RISM": "5.D+4 / (xy area)"
        },
        "Description": "fcp_mass\nMass of the Fictitious Charge Particle (FCP).",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = 'relax' and 'md'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lfcp": "must be .TRUE.",
            "calculation": "must be 'relax' or 'md'"
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_velocity",
        "Value_Type": "real",
        "Default_Values": {
            "default": "determined by fcp_temperature"
        },
        "Description": "fcp_velocity\nInitial velocity of the Fictitious Charge Particle (FCP).",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = 'relax' and 'md'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lfcp": "must be .TRUE.",
            "calculation": "must be 'relax' or 'md'",
            "fcp_temperature": "determines default value"
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_temperature",
        "Value_Type": "character",
        "Default_Values": {
            "default": "not_controlled"
        },
        "Description": "fcp_temperature\nFictitious Charge Particle (FCP) temperature control parameter",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = 'relax' and 'md'",
        "Parameter_Value_Conditions": {
            "rescaling": "control FCP's temperature via velocity rescaling (first method) see parameters 'fpc_tempw' and 'fcp_tolp'",
            "rescale-v": "control FCP's temperature via velocity rescaling (second method) see parameters 'fcp_tempw' and 'fcp_nraise'",
            "rescale-T": "control FCP's temperature via velocity rescaling (third method) see parameter 'fcp_delta_t'",
            "reduce-T": "reduce FCP's temperature every 'fcp_nraise' steps by the (negative) value 'fcp_delta_t'",
            "berendsen": "control FCP's temperature using \"soft\" velocity rescaling - see parameters 'fcp_tempw' and 'fcp_nraise'",
            "andersen": "control FCP's temperature using Andersen thermostat see parameters 'fcp_tempw' and 'fcp_nraise'",
            "initial": "initialize FCP's velocities to temperature 'fcp_tempw' and leave uncontrolled further on",
            "not_controlled": "(default) FCP's temperature is not controlled"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "fcp_tempw": [
                "rescaling",
                "rescale-v",
                "berendsen",
                "andersen",
                "initial"
            ],
            "fcp_tolp": [
                "rescaling"
            ],
            "fcp_nraise": [
                "rescale-v",
                "reduce-T",
                "berendsen",
                "andersen"
            ],
            "fcp_delta_t": [
                "rescale-T",
                "reduce-T"
            ]
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_tempw",
        "Value_Type": "real",
        "Default_Values": {
            "default": "reads from tempw"
        },
        "Description": "fcp_tempw\nStarting temperature (Kelvin) in Fictitious Charge Particle (FCP) dynamics runs target temperature for most thermostats.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = relax and md",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lfcp": "must be .TRUE.",
            "calculation": "must be relax or md"
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_tolp",
        "Value_Type": "real",
        "Default_Values": {
            "default": "reads from tolp"
        },
        "Description": "fcp_tolp\nTolerance for velocity rescaling. Velocities are rescaled if the run-averaged and target temperature differ more than tolp.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = relax and md",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "tolp": "reads default value from"
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_delta_t",
        "Value_Type": "real",
        "Default_Values": {
            "default": "reads from &IONS -> delta_t"
        },
        "Description": "fcp_delta_t\nFictitious Charge Particle (FCP) temperature control parameter. For rescale-T mode: multiplies instantaneous temperature by this value at each step by rescaling velocities. For reduce-T mode: reduces temperature by -fcp_delta_t every fcp_nraise steps. For fcp_delta_t < 0, actual average rate of heating/cooling is roughly C*fcp_delta_t/(fcp_nraise*dt) where C=1 for ideal gas, C=0.5 for harmonic solid.",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = relax and md",
        "Parameter_Value_Conditions": {
            "fcp_delta_t < 0": "For cooling/heating rate calculation"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "&IONS": "reads default value from delta_t",
            "fcp_nraise": "Used in reduce-T mode for step counting",
            "fcp_temperature": "Determines mode of operation"
        },
        "Final_comments": "The instantaneous temperature is calculated at the end of FCP's move and BEFORE rescaling. This is the temperature reported in the main output.",
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "fcp_nraise",
        "Value_Type": "integer",
        "Default_Values": {
            "default": "reads from nraise"
        },
        "Description": "fcp_nraise\nFictitious Charge Particle (FCP) parameter that controls temperature adjustments based on fcp_temperature setting: for reduce-T mode, controls steps between temperature reductions; for rescale-v mode, controls steps for temperature rescaling; for berendsen mode, controls rise time parameter; for andersen mode, controls collision frequency parameter",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE. AND calculation = relax and md",
        "Parameter_Value_Conditions": {
            "fcp_temperature = reduce-T": "every fcp_nraise steps temperature reduced by -fcp_delta_t",
            "fcp_temperature = rescale-v": "every fcp_nraise steps average temperature rescaled to fcp_tempw",
            "fcp_temperature = berendsen": "tau = fcp_nraise*dt, dt/tau = 1/fcp_nraise",
            "fcp_temperature = andersen": "nu*dt = 1/fcp_nraise"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "fcp_temperature": "determines how fcp_nraise is used",
            "fcp_delta_t": "used when fcp_temperature = reduce-T",
            "fcp_tempw": "used when fcp_temperature = rescale-v"
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "freeze_all_atoms",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "freeze_all_atoms\nIf .TRUE., freeze all atoms to perform relaxation or dynamics only with Fictitious Charge Particle (FCP).",
        "Possible_Usage_Conditions": [
            "calculation = 'relax'",
            "calculation = 'md'",
            "FCP calculations",
            "lfcp = .TRUE."
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if lfcp = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lfcp": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&FCP"
    },
    {
        "Parameter_Name": "nsolv",
        "Value_Type": "integer",
        "Default_Values": {
            "default": null
        },
        "Description": "nsolv\nThe number of solvents (i.e. molecular species) in the unit cell",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "required",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "closure",
        "Value_Type": "character",
        "Default_Values": {
            "default": "kh"
        },
        "Description": "closure\nSpecify the type of closure equation:\n\n'kh' :\nThe Kovalenko and Hirata's model.\n\n'hnc' :\nThe HyperNetted-Chain model, which is\nsuitable only for solvents without charge.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Systems with solvent-solute interactions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            "kh": "The Kovalenko and Hirata's model",
            "hnc": "The HyperNetted-Chain model, suitable only for solvents without charge"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "tempv",
        "Value_Type": "real",
        "Default_Values": {
            "default": "300.D0"
        },
        "Description": "tempv\nTemperature (Kelvin) of solvents.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Systems with solvent-solute interactions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "ecutsolv",
        "Value_Type": "real",
        "Default_Values": {
            "default": "4 * ecutwfc"
        },
        "Description": "ecutsolv\nKinetic energy cutoff (Ry) for solvent's correlation functions.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Framework/porous systems",
            "single atom/isolated systems",
            "Slab systems",
            "Systems with solvent-solute interactions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            "default": "If a solute is an isolated system or slab",
            "larger value": "For a frameworked or porous solute (e.g. Zeolite, MOF)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ecutwfc": "default value is 4 * ecutwfc"
        },
        "Final_comments": "Solvents confined in a framework often have a high frequency.",
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "solute_lj",
        "Value_Type": "character",
        "Default_Values": {
            "default": "uff"
        },
        "Description": "solute_lj(i), i=1,ntyp\nSpecify the Lennard-Jones potential of solute on atomic type i",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            "none": "The Lennard-Jones potential is not specified here. you must set solute_epsilon and solute_sigma",
            "uff": "Universal Force Field",
            "clayff": "Clay's Force Field",
            "opls-aa": "OPLS-AA (generic parameters for QM/MM)"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "solute_epsilon": "Must be set when solute_lj = none",
            "solute_sigma": "Must be set when solute_lj = none"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "solute_epsilon",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "solute_epsilon(i), i=1,ntyp\nThe Lennard-Jones potential of solute on atomic type 'i'. Here, you can set the parameter 'epsilon' (kcal/mol).",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Systems with solvent-solute interactions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "&RISM": "Parameter belongs to this namelist"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "solute_sigma",
        "Value_Type": "real",
        "Default_Values": {
            "default": null
        },
        "Description": "solute_sigma(i), i=1,ntyp\nThe Lennard-Jones potential of solute on atomic type 'i'. Here, you can set the parameter 'sigma' (Angstrom).",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Systems with solvent-solute interactions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "&RISM": "Parameter belongs to this namelist"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "starting1d",
        "Value_Type": "character",
        "Default_Values": {
            "default": {
                "scf, relax, md, vc-relax, vc-md": "zero",
                "nscf, bands": "fix"
            }
        },
        "Description": "starting1d\nControls how to initialize/handle 1D-RISM correlation functions",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            "zero": "Starting correlation functions of 1D-RISM from zero",
            "fix": "Read from existing \"1d-rism_csvv_r.xml\" file in the directory specified by parameters 'prefix' and 'outdir', and never calculate 1D-RISM",
            "file": "Start from existing \"1d-rism_csvv_r.xml\" file in the directory specified by parameters 'prefix' and 'outdir'"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "prefix": "Used to specify directory for reading xml file",
            "outdir": "Used to specify directory for reading xml file",
            "trism": "Must be .TRUE. for this parameter to be used"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "starting3d",
        "Value_Type": "character",
        "Default_Values": {
            "default": {
                "scf, relax, md, vc-relax, vc-md": "zero",
                "nscf, bands": "file"
            }
        },
        "Description": "starting3d\nControls how to start correlation functions of 3D-RISM. 'zero': Starting correlation functions of 3D-RISM from zero. 'file': Start from existing \"3d-rism_csuv_r.dat\" file in the directory specified by parameters 'prefix' and 'outdir'.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            "zero": "For calculation = scf, relax, md, vc-relax, vc-md",
            "file": "For calculation = nscf, bands"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "prefix": "Used to specify directory for file reading",
            "outdir": "Used to specify directory for file reading"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "smear1d",
        "Value_Type": "real",
        "Default_Values": {
            "default": "2.D0"
        },
        "Description": "smear1d\nCoulomb smearing radius (a.u.) for 1D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "smear3d",
        "Value_Type": "real",
        "Default_Values": {
            "default": "2.D0"
        },
        "Description": "smear3d\nCoulomb smearing radius (a.u.) for 3D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism1d_maxstep",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 50000
        },
        "Description": "rism1d_maxstep\nMaximum number of iterations in a 1D-RISM step.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Systems using Reference Interaction Site Model (RISM)"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism3d_maxstep",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 5000
        },
        "Description": "rism3d_maxstep\nMaximum number of iterations in a 3D-RISM step.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism1d_conv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-8"
        },
        "Description": "rism1d_conv_thr\nConvergence threshold for 1D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism3d_conv_thr",
        "Value_Type": "real",
        "Default_Values": {
            "default": "1.D-5",
            "lgcscf = .TRUE.": "5.D-6",
            "lgcscf = .FALSE.": "1.D-5"
        },
        "Description": "rism3d_conv_thr\nConvergence threshold for 3D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "lgcscf": "Default value depends on lgcscf parameter"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "mdiis1d_size",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 20
        },
        "Description": "mdiis1d_size\nSize of Modified DIIS (MDIIS) for 1D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "mdiis3d_size",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 10
        },
        "Description": "mdiis3d_size\nSize of Modified DIIS (MDIIS) for 3D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "mdiis1d_step",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.5D0"
        },
        "Description": "mdiis1d_step\nStep of Modified DIIS (MDIIS) for 1D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "mdiis3d_step",
        "Value_Type": "real",
        "Default_Values": {
            "default": "0.8D0"
        },
        "Description": "mdiis3d_step\nStep of Modified DIIS (MDIIS) for 3D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism1d_bond_width",
        "Value_Type": "real",
        "Default_Values": {
            "default": {
                "3D-RISM calculation": 0,
                "Laue-RISM calculation": "2 / SQRT(ecutwfc)"
            }
        },
        "Description": "rism1d_bond_width\nGaussian width of bonds to smear intra-molecular correlation for 1D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ecutwfc": "Used in default value calculation for Laue-RISM"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism1d_dielectric",
        "Value_Type": "real",
        "Default_Values": {
            "default": -1.0
        },
        "Description": "rism1d_dielectric\nDielectric constant for 1D-RISM. If rism1d_dielectric > 0, dielectrically consistent RISM (DRISM) is performed.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "dielectrically consistent RISM (DRISM)"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            ">0": "dielectrically consistent RISM (DRISM) is performed"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism1d_molesize",
        "Value_Type": "real",
        "Default_Values": {
            "default": "2.0D0"
        },
        "Description": "rism1d_molesize\nSize of solvent molecules (a.u.) for 1D-RISM. If you have large molecules, you have to set ~ 20 a.u.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Dielectric environment"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and rism1d_dielectric > 0",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE.",
            "rism1d_dielectric": "must be > 0"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism1d_nproc",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 128
        },
        "Description": "rism1d_nproc\nNumber of processes to calculate 1D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism3d_conv_level",
        "Value_Type": "real",
        "Default_Values": {
            "laue_both_hands = .FALSE. AND lgcscf = .FALSE.": 0.1,
            "laue_both_hands = .FALSE. AND lgcscf = .TRUE.": 0.3,
            "laue_both_hands = .TRUE.": 0.5
        },
        "Description": "rism3d_conv_level\nConvergence level of 3D-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            "0.0": "Convergence level is \"low\". Convergence threshold of 3D-RISM is greater than rism3d_conv_thr, when estimated energy error >> conv_thr. The threshold becomes rism3d_conv_thr, when estimated energy error is small enough.",
            "0.0<x<1.0": "Convergence level is \"medium\". Convergence threshold of 3D-RISM is intermediate value between \"low\" and \"high\", where rism3d_conv_level is mixing rate.",
            "1.0": "Convergence level is \"high\". Convergence threshold of 3D-RISM is always rism3d_conv_thr."
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "laue_both_hands": "Affects default value",
            "lgcscf": "Affects default value",
            "rism3d_conv_thr": "Used as threshold value",
            "conv_thr": "Used for energy error comparison"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "rism3d_planar_average",
        "Value_Type": "logical",
        "Default_Values": {
            "3D-RISM": false,
            "Laue-RISM": true
        },
        "Description": "rism3d_planar_average\nIf .TRUE., planar averages of solvent densities and potentials are calculated and written to 'prefix.rism1'.",
        "Possible_Usage_Conditions": [
            "RISM calculations"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_nfit",
        "Value_Type": "integer",
        "Default_Values": {
            "default": 4
        },
        "Description": "laue_nfit\nThe number of z-grid points for the polynomial fit along the cell edge.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_expand_right",
        "Value_Type": "real",
        "Default_Values": {
            "default": -1.0
        },
        "Description": "laue_expand_right\nIf positive value, set the ending position offset [in a.u.] of the solvent region on right-hand side of the unit cell, measured relative to the unit cell edge. (the solvent region ends at z = + [L_z/2 + laue_expand_right].)",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM",
        "Parameter_Value_Conditions": {
            "positive value": "sets ending position offset"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_expand_left",
        "Value_Type": "real",
        "Default_Values": {
            "default": -1.0
        },
        "Description": "laue_expand_left\nIf positive value, set the ending position offset [in a.u.] of the solvent region on left-hand side of the unit cell, measured relative to the unit cell edge. (the solvent region ends at z = - [L_z/2 + laue_expand_left].)",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM",
        "Parameter_Value_Conditions": {
            "positive value": "sets ending position offset"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_starting_right",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.0
        },
        "Description": "laue_starting_right\nSet the starting position [in a.u.] of the solvent region on right-hand side of the unit cell. Then the solvent region is defined as [ laue_starting_right , L_z/2 + laue_expand_right ], where distribution functions are finite.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "&RISM": "Parameter belongs to this namelist"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_starting_left",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.0
        },
        "Description": "laue_starting_left\nSet the starting position [in a.u.] of the solvent region on left-hand side of the unit cell. Then the solvent region is defined as [ -L_z/2 - laue_expand_left , laue_starting_left ], where distribution functions are finite.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Periodic systems",
            "Laue boundary conditions",
            "Systems with solvent-solute interactions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE.",
            "laue_expand_left": "used in solvent region definition"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_buffer_right",
        "Value_Type": "real",
        "Default_Values": {
            "laue_expand_right > 0.0": 8.0,
            "laue_expand_right <= 0.0": -1.0
        },
        "Description": "laue_buffer_right\nIf positive value, set the buffering length [in a.u.] of the solvent region on right-hand side of the unit cell. Then correlation functions are defined inside of [ laue_starting_right - laue_buffer_right , L_z/2 + laue_expand_right ].",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM",
        "Parameter_Value_Conditions": {
            "positive value": "sets buffering length"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "laue_starting_right": "used in correlation functions range definition",
            "laue_expand_right": "used in correlation functions range definition"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_buffer_left",
        "Value_Type": "real",
        "Default_Values": {
            "laue_expand_left > 0.0": 8.0,
            "laue_expand_left <= 0.0": -1.0
        },
        "Description": "laue_buffer_left\nIf positive value, set the buffering length [in a.u.] of the solvent region on left-hand side of the unit cell. Then correlation functions are defined inside of [ -L_z/2 - laue_expand_left , laue_starting_left + laue_buffer_left ].",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Systems with solvent-solute interactions",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            "positive value": "sets buffering length of solvent region on left-hand side"
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "laue_expand_left": "determines default value",
            "laue_starting_left": "used in correlation functions definition"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_both_hands",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "laue_both_hands\nIf .TRUE., you can set different densities to the solvent regions of right-hand side and left-hand side.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Systems with solvent regions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE."
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_wall",
        "Value_Type": "character",
        "Default_Values": {
            "default": "auto"
        },
        "Description": "laue_wall\nSet the repulsive wall with (1/r)^12 term of Lennard-Jones potential. This is only for Laue-RISM.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE.",
        "Parameter_Value_Conditions": {
            "none": "The repulsive wall is not defined.",
            "auto": "The repulsive wall is defined, whose edge position is set automatically. One does not have to set 'laue_wall_z' (the edge position).",
            "manual": "The repulsive wall is defined, whose edge position is set manually. One have to set 'laue_wall_z' (the edge position)."
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "laue_wall_z": "Required to be set when laue_wall = 'manual'"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_wall_z",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.0
        },
        "Description": "laue_wall_z\nSet the edge position [in a.u.] of the repulsive wall.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "This is only for Laue-RISM and laue_wall = 'manual'",
        "Parameter_Value_Conditions": {
            "laue_wall_z": {
                "If laue_expand_right > 0.0": "repulsive wall is defined on [ -inf , laue_wall_z ]",
                "If laue_expand_left > 0.0": "repulsive wall is defined on [ laue_wall_z , inf ]"
            }
        },
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "laue_wall": "must be set to 'manual'",
            "laue_expand_right": "affects wall definition",
            "laue_expand_left": "affects wall definition"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_wall_rho",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.01
        },
        "Description": "laue_wall_rho\nThe density (1/bohr^3) of the repulsive wall.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "laue_wall != 'none'",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM and laue_wall != 'none'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE.",
            "laue_wall": "must not be 'none'"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_wall_epsilon",
        "Value_Type": "real",
        "Default_Values": {
            "default": 0.1
        },
        "Description": "laue_wall_epsilon\nThe Lennard-Jones potential of the repulsive wall (kcal/mol).",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue boundary conditions"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM and laue_wall != 'none'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE.",
            "laue_wall": "must not be 'none'"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_wall_sigma",
        "Value_Type": "real",
        "Default_Values": {
            "default": 4.0
        },
        "Description": "laue_wall_sigma\nThe Lennard-Jones potential of the repulsive wall 'sigma' (Angstrom).",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue-RISM calculations",
            "laue_wall != 'none'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM and laue_wall != 'none'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be .TRUE.",
            "laue_wall": "must not be 'none'"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Parameter_Name": "laue_wall_lj6",
        "Value_Type": "logical",
        "Default_Values": {
            "default": false
        },
        "Description": "laue_wall_lj6\nIf .TRUE., the attractive term -(1/r)^6 of Lennard-Jones potential is added.",
        "Possible_Usage_Conditions": [
            "RISM calculations",
            "Laue-RISM calculations",
            "laue_wall must not be 'none'"
        ],
        "Required/Optional": "optional",
        "Usage_Conditions": "Only if trism = .TRUE. and for Laue-RISM and laue_wall != 'none'",
        "Parameter_Value_Conditions": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "trism": "must be TRUE",
            "laue_wall": "must not be 'none'"
        },
        "Final_comments": null,
        "Namelist": "&RISM"
    },
    {
        "Card_Name": "ATOMIC_SPECIES",
        "Namelist": "Card: ATOMIC_SPECIES",
        "Required/Optional": null,
        "Card_Options": null,
        "Default_Option": null,
        "Description": null,
        "Card_Use_Conditions": null,
        "Card_Option_Given_Conditions": null,
        "Syntax_Given_Option": null,
        "Item_Description": {
            "X": "label of the atom. Acceptable syntax: chemical symbol X (1 or 2 characters, case-insensitive) or chemical symbol plus a number or a letter, as in \"Xn\" (e.g. Fe1) or \"X_*\" or \"X-*\" (e.g. C1, C_h; max total length cannot exceed 3 characters)",
            "Mass_X": "mass of the atomic species [amu: mass of C = 12]",
            "PseudoPot_X": "File containing PP for this species"
        },
        "Item_Conditions": {
            "Mass_X": "Used only when performing Molecular Dynamics (calculation = 'md', 'vc-md') run or structural optimization (calculation = 'relax', 'vc-relax') runs using Damped MD ('cell_dynamics', 'ion_dynamics'). Not actually used in all other cases (but stored in data files, so phonon calculations will use these values unless other values are provided)"
        },
        "General_Syntax": "ATOMIC_SPECIES\nX(1) \t Mass_X(1) \t PseudoPot_X(1)\nX(2) \t Mass_X(2) \t PseudoPot_X(2)\nX(ntyp) \t Mass_X(ntyp) \t PseudoPot_X(ntyp)",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "calculation": [
                "calculation = 'md'",
                "calculation = 'vc-md'",
                "calculation = 'relax'",
                "calculation = 'vc-relax'"
            ],
            "cell_dynamics": null,
            "ion_dynamics": null
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": []
    },
    {
        "Card_Name": "ATOMIC_POSITIONS",
        "Namelist": "Card: ATOMIC_POSITIONS",
        "Required/Optional": "required",
        "Card_Options": [
            "alat",
            "bohr",
            "angstrom",
            "crystal",
            "crystal_sg"
        ],
        "Default_Option": null,
        "Description": null,
        "Card_Use_Conditions": null,
        "Card_Option_Given_Conditions": {
            "crystal_sg": "space group number must be provided"
        },
        "Syntax_Given_Option": {
            "alat": "cartesian coordinates in units of lattice parameter",
            "bohr": "cartesian coordinates in atomic units",
            "angstrom": "cartesian coordinates in Angstrom",
            "crystal": "relative coordinates of the primitive lattice vectors",
            "crystal_sg": "relative coordinates of the primitive lattice with symmetry inequivalent atoms"
        },
        "Item_Description": {
            "X": "label of the atom as specified in ATOMIC_SPECIES",
            "x,y,z": "atomic positions",
            "if_pos(1), if_pos(2), if_pos(3)": "component i of the force for this atom is multiplied by if_pos(i), which must be either 0 or 1"
        },
        "Item_Conditions": {
            "if_pos": "Used in MD dynamics or structural optimization run (calculation = 'md', 'vc-md', 'relax', 'vc-relax')",
            "crystal_sg constraints": "constraints are copied in all equivalent atoms"
        },
        "General_Syntax": "ATOMIC_POSITIONS { alat | bohr | angstrom | crystal | crystal_sg }\nX(1)   x(1)   y(1)   z(1)   {  if_pos(1)(1)   if_pos(2)(1)   if_pos(3)(1)  }\nX(2)   x(2)   y(2)   z(2)   {  if_pos(1)(2)   if_pos(2)(2)   if_pos(3)(2)  }\nX(nat) x(nat) y(nat) z(nat) {  if_pos(1)(nat) if_pos(2)(nat) if_pos(3)(nat) }",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ATOMIC_SPECIES": "referenced for atom labels",
            "CELL_PARAMETERS": "used with crystal option",
            "celldm": "used with alat option",
            "space_group": "used with crystal_sg option",
            "uniqueb": "used with crystal_sg option",
            "origin_choice": "used with crystal_sg option",
            "rhombohedral": "used with crystal_sg option"
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": []
    },
    {
        "Card_Name": "K_POINTS",
        "Namelist": "Card: K_POINTS",
        "Required/Optional": null,
        "Card_Options": [
            "tpiba",
            "tpiba_b",
            "tpiba_c",
            "crystal",
            "crystal_b",
            "crystal_c",
            "gamma",
            "automatic"
        ],
        "Default_Option": "tpiba",
        "Description": null,
        "Card_Use_Conditions": null,
        "Card_Option_Given_Conditions": {
            "gamma": "wavefunctions can be chosen as real, and specialized subroutines optimized for calculations at the gamma point are used",
            "automatic": "generates uniform grid of k-points with specified grid and offset parameters"
        },
        "Syntax_Given_Option": {
            "tpiba": "K_POINTS tpiba\nnks\nxk_x(1) xk_y(1) xk_z(1) wk(1)\nxk_x(2) xk_y(2) xk_z(2) wk(2)\nxk_x(nks) xk_y(nks) xk_z(nks) wk(nks)",
            "crystal": "K_POINTS crystal\nnks\nxk_x(1) xk_y(1) xk_z(1) wk(1)\nxk_x(2) xk_y(2) xk_z(2) wk(2)\nxk_x(nks) xk_y(nks) xk_z(nks) wk(nks)",
            "tpiba_b": "K_POINTS tpiba_b\nnks\nxk_x(1) xk_y(1) xk_z(1) wk(1)\nxk_x(2) xk_y(2) xk_z(2) wk(2)\nxk_x(nks) xk_y(nks) xk_z(nks) wk(nks)",
            "crystal_b": "K_POINTS crystal_b\nnks\nxk_x(1) xk_y(1) xk_z(1) wk(1)\nxk_x(2) xk_y(2) xk_z(2) wk(2)\nxk_x(nks) xk_y(nks) xk_z(nks) wk(nks)",
            "tpiba_c": "K_POINTS tpiba_c\nnks\nxk_x(1) xk_y(1) xk_z(1) wk(1)\nxk_x(2) xk_y(2) xk_z(2) wk(2)\nxk_x(nks) xk_y(nks) xk_z(nks) wk(nks)",
            "crystal_c": "K_POINTS crystal_c\nnks\nxk_x(1) xk_y(1) xk_z(1) wk(1)\nxk_x(2) xk_y(2) xk_z(2) wk(2)\nxk_x(nks) xk_y(nks) xk_z(nks) wk(nks)",
            "automatic": "K_POINTS automatic\nnk1 nk2 nk3 sk1 sk2 sk3",
            "gamma": "K_POINTS gamma"
        },
        "Item_Description": {
            "nks": "Number of supplied special k-points",
            "xk_x, xk_y, xk_z": "Special k-points in the irreducible Brillouin Zone (IBZ) of the lattice (with all symmetries)",
            "wk": "weights",
            "nk1, nk2, nk3": "These parameters specify the k-point grid (nk1 x nk2 x nk3) as in Monkhorst-Pack grids",
            "sk1, sk2, sk3": "The grid offsets"
        },
        "Item_Conditions": {
            "sk1, sk2, sk3": "must be 0 (no offset) or 1 (grid displaced by half a grid step in the corresponding direction)",
            "nks": "must be 3 for tpiba_c and crystal_c options"
        },
        "General_Syntax": null,
        "Relationships_Conditions_to_Other_Parameters_Cards": {},
        "Final_comments": "Only grids having the full symmetry of the crystal work with tetrahedra. Some grids with offset may not work.",
        "Possible_Usage_Conditions": []
    },
    {
        "Card_Name": "ADDITIONAL_K_POINTS",
        "Namelist": "Card: ADDITIONAL_K_POINTS",
        "Required/Optional": "optional",
        "Card_Options": [
            "tpiba",
            "tpiba_b",
            "tpiba_c",
            "crystal",
            "crystal_b",
            "crystal_c"
        ],
        "Default_Option": "tpiba",
        "Description": "Adds a list of k-points with zero weight, after those used for the scf calculation. When doing an EXX calculation and 'nq1x', 'nq2x' or 'nq3x' are different from one, also include the required k+q points. The main use of this card is to do band plots with EXX.",
        "Card_Use_Conditions": {
            "band plots with EXX": "main use",
            "EXX calculation": "when 'nqx1', 'nqx2' or 'nqx3' are different from one"
        },
        "Card_Option_Given_Conditions": {
            "band-structure plots": "tpiba_b or crystal_b",
            "band-structure contour plots": "tpiba_c or crystal_c"
        },
        "Syntax_Given_Option": {
            "tpiba_b": "nks points specify nks-1 lines in reciprocal space",
            "tpiba_c": "nks must be 3, specifies rectangle in reciprocal space",
            "crystal_b": "Same as tpiba_b but in crystal coordinates",
            "crystal_c": "Same as tpiba_c but in crystal coordinates"
        },
        "Item_Description": {
            "nks_add": "Number of supplied 'additional' k-points",
            "k_x, k_y, k_z, wk_": "Special k-points (xk_x/y/z) in the irreducible Brillouin Zone (IBZ) of the lattice (with all symmetries) and weights (wk)"
        },
        "Item_Conditions": {
            "nks": "Must be 3 for tpiba_c and crystal_c options"
        },
        "General_Syntax": "ADDITIONAL_K_POINTS tpiba | tpiba_b | tpiba_c | crystal | crystal_b  | crystal_c\nnks_add\nk_x(1) k_y(1) k_z(1) wk_(1)\nk_x(2) k_y(2) k_z(2) wk_(2)\nk_x(nks_add) k_y(nks_add) k_z(nks_add) wk_(nks_add)",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "nqx1, nqx2, nqx3": "When different from one in EXX calculation, include required k+q points"
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": [
            "Exact exchange calculations"
        ]
    },
    {
        "Card_Name": "CELL_PARAMETERS",
        "Namelist": "Card: CELL_PARAMETERS",
        "Required/Optional": "optional",
        "Card_Options": [
            "alat",
            "bohr",
            "angstrom"
        ],
        "Default_Option": "alat",
        "Description": "Defines the crystal lattice vectors in cartesian axis",
        "Card_Use_Conditions": {
            "ibrav": "must be set ONLY if ibrav = 0",
            "omission": "must be omitted if ibrav != 0"
        },
        "Card_Option_Given_Conditions": {
            "alat": "lattice vectors in units of the lattice parameter (either 'celldm(1)' or 'A')",
            "bohr": "lattice vectors in bohr-radii",
            "angstrom": "lattice vectors in Angstrom"
        },
        "Syntax_Given_Option": null,
        "Item_Description": {
            "v1": "1st lattice vector",
            "v2": "2nd lattice vector",
            "v3": "3rd lattice vector"
        },
        "Item_Conditions": null,
        "General_Syntax": "CELL_PARAMETERS { alat | bohr | angstrom }\nv1(1) \t v1(2) \t v1(3)\nv2(1) \t v2(2) \t v2(3)\nv3(1) \t v3(2) \t v3(3)",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "celldm": "used as lattice parameter when option is alat",
            "A, B, C, cosAB, cosAC, cosBC": "used as lattice parameter when option is alat"
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": [
            "ibrav = 0"
        ]
    },
    {
        "Card_Name": "CONSTRAINTS",
        "Namelist": "Card: CONSTRAINTS",
        "Required/Optional": "optional",
        "Card_Options": [
            "type_coord",
            "atom_coord",
            "distance",
            "planar_angle",
            "torsional_angle",
            "bennett_proj",
            "potential_wall"
        ],
        "Default_Option": null,
        "Description": "Used to impose specific geometric constraints during molecular dynamics simulations or constrained optimization processes. These constraints can apply to distances, angles, or coordination numbers between atoms.",
        "Card_Use_Conditions": {
            "calculation": [
                "calculation = 'relax'",
                "calculation = 'md'"
            ],
            "ion_dynamics": [
                "damp",
                "verlet"
            ],
            "not_compatible": [
                "calculation = 'vc-relax'",
                "calculation = 'vc-md'"
            ]
        },
        "Card_Option_Given_Conditions": null,
        "Syntax_Given_Option": {
            "type_coord": "constr_type type_coord constr(1) constr(2) constr(3) constr(4)",
            "atom_coord": "constr_type atom_coord constr(1) constr(2) constr(3) constr(4)",
            "distance": "constr_type distance constr(1) constr(2) constr_target",
            "planar_angle": "constr_type planar_angle constr(1) constr(2) constr(3) constr_target",
            "torsional_angle": "constr_type torsional_angle constr(1) constr(2) constr(3) constr(4) constr_target",
            "bennett_proj": "constr_type bennett_proj constr(1) constr(2) constr(3) constr(4)",
            "potential_wall": "constr_type potential_wall constr(1) constr(2) constr(3)"
        },
        "Item_Description": {
            "nconstr": "The total number of constraints to be applied",
            "constr_tol": "Optional tolerance value for how strictly constraints should be enforced",
            "constr_type": "Type of constraint"
        },
        "Item_Conditions": null,
        "General_Syntax": "CONSTRAINTS\nnconstr   { constr_tol   }\nconstr_type(1) \t constr(1)(1) \t constr(2)(1) \t[\t constr(3)(1)  \t constr(4)(1)  \t]\t{\t constr_target(1) \t}\nconstr_type(2) \t constr(1)(2) \t constr(2)(2) \t[\t constr(3)(2)  \t constr(4)(2)  \t]\t{\t constr_target(2) \t}\nconstr_type(nconstr) \t constr(1)(nconstr) \t constr(2)(nconstr) \t[\t constr(3)(nconstr)  \t constr(4)(nconstr)  \t]\t{\t constr_target(nconstr) \t}",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ion_dynamics": "must be set to 'damp' or 'verlet'"
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": [
            "ion_dynamics = 'verlet'",
            "ion_dynamics = 'damp'"
        ]
    },
    {
        "Card_Name": "OCCUPATIONS",
        "Namelist": "Card: OCCUPATIONS",
        "Required/Optional": "optional",
        "Card_Options": null,
        "Default_Option": null,
        "Description": null,
        "Card_Use_Conditions": {
            "occupations": "from_input"
        },
        "Card_Option_Given_Conditions": null,
        "Syntax_Given_Option": null,
        "Item_Description": {
            "f_inp1": "Occupations of individual states (MAX 10 PER ROW). For spin-polarized calculations, these are majority spin states.",
            "f_inp2": "Occupations of minority spin states (MAX 10 PER ROW)"
        },
        "Item_Conditions": {
            "f_inp2": "To be specified only for spin-polarized calculations"
        },
        "General_Syntax": "OCCUPATIONS\nf_inp1(1) f_inp1(2) . . . f_inp1(nbnd)\n[ f_inp2(1) f_inp2(2) . . . f_inp2(nbnd) ]",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "occupations": "Card is used only if occupations = 'from_input', ignored otherwise"
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": [
            "occupations = 'from_input'"
        ]
    },
    {
        "Card_Name": "ATOMIC_VELOCITIES",
        "Namelist": "Card: ATOMIC_VELOCITIES",
        "Required/Optional": "optional",
        "Card_Options": [
            "a.u"
        ],
        "Default_Option": null,
        "Description": "reads velocities from standard input",
        "Card_Use_Conditions": null,
        "Card_Option_Given_Conditions": null,
        "Syntax_Given_Option": {
            "a.u": "V(1) \t vx(1) \t vy(1) \t vz(1)\nV(2) \t vx(2) \t vy(2) \t vz(2)\nV(nat) \t vx(nat) \t vy(nat) \t vz(nat)"
        },
        "Item_Description": {
            "V": "label of the atom as specified in ATOMIC_SPECIES",
            "vx, vy, vz": "atomic velocities along x y and z direction"
        },
        "Item_Conditions": {
            "V": "CHARACTER",
            "vx, vy, vz": "REAL"
        },
        "General_Syntax": "ATOMIC_VELOCITIES { a.u }\nV(1) \t vx(1) \t vy(1) \t vz(1)\nV(2) \t vx(2) \t vy(2) \t vz(2)\nV(nat) \t vx(nat) \t vy(nat) \t vz(nat)",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ATOMIC_SPECIES": "V label must match species specified here"
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": []
    },
    {
        "Card_Name": "ATOMIC_FORCES",
        "Namelist": "Card: ATOMIC_FORCES",
        "Required/Optional": "optional",
        "Card_Options": null,
        "Default_Option": null,
        "Description": "Used to specify external forces acting on atoms.",
        "Card_Use_Conditions": null,
        "Card_Option_Given_Conditions": null,
        "Syntax_Given_Option": null,
        "Item_Description": {
            "X": "label of the atom as specified in ATOMIC_SPECIES",
            "fx, fy, fz": "external force on atom X (cartesian components, Ry/a.u. units)"
        },
        "Item_Conditions": null,
        "General_Syntax": "ATOMIC_FORCES\nX(1) \t fx(1) \t fy(1) \t fz(1)\nX(2) \t fx(2) \t fy(2) \t fz(2)\nX(nat) \t fx(nat) \t fy(nat) \t fz(nat)",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ATOMIC_SPECIES": "X label must be specified in ATOMIC_SPECIES"
        },
        "Final_comments": "if the sum of external forces is not zero, the center of mass of the system will move",
        "Possible_Usage_Conditions": []
    },
    {
        "Card_Name": "SOLVENTS",
        "Namelist": "Card: SOLVENTS",
        "Required/Optional": "optional",
        "Card_Options": [
            "1/cell",
            "mol/L",
            "g/cm^3"
        ],
        "Default_Option": null,
        "Description": "Used for specifying solvent's concentration in different units",
        "Card_Use_Conditions": {
            "trism": "TRUE"
        },
        "Card_Option_Given_Conditions": {
            "1/cell": "solvent's concentration are specified as number of molecules in the unit cell",
            "mol/L": "solvent's concentration are specified as molar concentrations",
            "g/cm^3": "solvent's concentration are in gram per cm^3"
        },
        "Syntax_Given_Option": {
            "laue_both_hands=FALSE": "X(i) Density(i) Molecule(i)",
            "laue_both_hands=TRUE": "X(i) Density_Left(i) Density_Right(i) Molecule(i)"
        },
        "Item_Description": {
            "X": "label of the solvent molecule",
            "Density": "concentration of the solvent molecule in 1/cell, mol/L, or g/cm^3",
            "Density_Left": "concentration of the solvent molecule in the left-hand side, in 1/cell, mol/L, or g/cm^3",
            "Density_Right": "concentration of the solvent molecule in the right-hand side, in 1/cell, mol/L, or g/cm^3",
            "Molecule": "A MOL-file that has information about the solvent molecule, such as concentration and molecular structure"
        },
        "Item_Conditions": {
            "Density": "if -1 is given, that means read the concentraion from the MOL-file",
            "Density_Left": "if -1 is given, that means read the real density from the MOL-file",
            "Density_Right": "if -1 is given, that means read the real density from the MOL-file"
        },
        "General_Syntax": "SOLVENTS { 1/cell | mol/L | g/cm^3 }",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "laue_both_hands": "determines the syntax and required parameters",
            "trism": "card is only used if trism = .TRUE."
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": []
    },
    {
        "Card_Name": "HUBBARD",
        "Namelist": "Card: HUBBARD",
        "Required/Optional": null,
        "Card_Options": [
            "atomic",
            "ortho-atomic",
            "norm-atomic",
            "wf",
            "pseudo"
        ],
        "Default_Option": null,
        "Description": "The HUBBARD card is used to define the parameters for 'DFT+U', 'DFT+U+J', and 'DFT+U+V' calculations. These approaches are used to correct the electronic structure in systems where strongly correlated electrons are present, typically in transition metals and rare-earth elements.",
        "Card_Use_Conditions": {
            "DFT+U": "When using standard DFT+U calculation",
            "DFT+U+J": "When using DFT+U+J calculation",
            "DFT+U+V": "When using DFT+U+V calculation"
        },
        "Card_Option_Given_Conditions": {
            "atomic": "Uses atomic orbitals (from pseudopotential). With Forces and stress.",
            "ortho-atomic": "Uses Lowdin orthogonalized atomic orbitals (recommended to avoid double counting Hubbard corrections). With Forces and stress.",
            "norm-atomic": "Uses normalized atomic orbitals (without orthogonalization). Without Forces and stress.",
            "wf": "Uses Wannier functions to build Hubbard projectors (not maximally localized). Without Forces and stress.",
            "pseudo": "Uses pseudopotential projectors (requires all-electron atomic orbitals). With Forces and stress."
        },
        "Syntax_Given_Option": {
            "DFT+U": "HUBBARD atomic | ortho-atomic | norm-atomic | wf | pseudo\nU  label(1)-manifold(1)  u_val(1)\n[ J0  label(1)-manifold(1)  j0_val(1) ]\nU  label(n)-manifold(n)  u_val(n)\n[ J0  label(n)-manifold(n)  j0_val(n) ]",
            "DFT+U+J": "HUBBARD atomic | ortho-atomic | norm-atomic | wf | pseudo\nparamType(1)  label(1)-manifold(1)  paramValue(1)\nparamType(n)  label(n)-manifold(n)  paramValue(n)",
            "DFT+U+V": "HUBBARD atomic | ortho-atomic | norm-atomic | wf | pseudo\nU  label(I)-manifold(I)  u_val(I)\n[ J0  label(I)-manifold(I)  j0_val(I) ]\nV  label(I)-manifold(I)  label(J)-manifold(J)  I  J  v_val(I,J)\nU  label(N)-manifold(N)  u_val(N)\n[ J0  label(N)-manifold(N)  j0_val(N) ]\nV  label(N)-manifold(N)  label(M)-manifold(M)  N  M  v_val(N,M)"
        },
        "Item_Description": {
            "U": "Specifies the U parameter",
            "label": "Atom label (as defined in ATOMIC_SPECIES)",
            "manifold": "Specifies the atomic manifold (e.g., 3d, 2p)",
            "u_val": "Value of the U parameter (in eV)",
            "J0": "Specifies the J0 parameter",
            "j0_val": "Value of the J0 parameter (in eV)",
            "paramType": "Type of Hubbard parameter (U, J, B, E2, E3)",
            "paramValue": "Value of the parameter (in eV)",
            "V": "Specifies the V parameter (interaction between two atoms)",
            "v_val": "Value of the V parameter (in eV)"
        },
        "Item_Conditions": {
            "J0": "Optional parameter",
            "j0_val": "Required when J0 is specified"
        },
        "General_Syntax": "HUBBARD atomic | ortho-atomic | norm-atomic | wf | pseudo",
        "Relationships_Conditions_to_Other_Parameters_Cards": {
            "ATOMIC_SPECIES": "Atom labels must be defined in ATOMIC_SPECIES"
        },
        "Final_comments": null,
        "Possible_Usage_Conditions": [
            "DFT+U Hubbard correction",
            "DFT+U+J Hubbard correction",
            "DFT+U+V Hubbard correction"
        ]
    }
]